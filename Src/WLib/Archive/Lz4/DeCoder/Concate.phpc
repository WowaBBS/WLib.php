<?
  $this->Parent_Class('/Archive/Lz4/DeCoder/Base');

  Class C_Archive_Lz4_DeCoder_Concate extends C_Archive_Lz4_DeCoder_Base
  {
    Var $Input     ='' ;
    Var $InputLen  =0  ;
    Var $ReadPos   =0  ;
    Var $Output    ='' ;
    Var $OutputLen =0  ;
    
  //****************************************************************
    
    Function Read_Byte() { Return Ord($this->Input[$this->ReadPos++]); }
    Function Read_Offset() { Return $this->Read_Byte() | $this->Read_Byte()<<8; }
    Function Read_Len()
    {
      $Sum=0;
      Do
      {
        $Sum+=$Summand=$this->Read_Byte();
      }
      While($Summand===0xFF);
      return $Sum;
    }
    
    Function Read_IsEnd() { Return $this->ReadPos>=$this->InputLen; }
    
  //****************************************************************
  // Concate
  
    Function Read_Str($Len)
    {
      $R=SubStr($this->Input, $this->ReadPos, $Len);
      If(StrLen($R)!==$Len)
        Return $this->Log('Error', 'Lz4: Readed less than need')->Ret(False);
      $this->ReadPos+=$Len;
      Return $R;
    }
    
    Function Write($Str, $Id)
    {
      If($this->Debug)
        $this->Log('Debug', $Id, ' ', [$Str]);
      $this->Output.=$Str;
      Return True;
    }
    
    Function Copy($Ofs, $Len)
    {
      $Pos = StrLen($this->Output)-$Ofs;
      If($Pos<0)
        Return $this->Log('Error', 'Lz4: Offset out of data')->Ret(False);

      $R=SubStr($this->Output, $Pos, $Len);
      $this->Write($R, 'First');
      $L=StrLen($R);
      $Len-=$L;
      
      For(;$Len>=$L;$Len-=$L)
        $this->Write($R, 'Repeat');
        
      If($Len>0)
        $this->Write(SubStr($R, 0, $Len), 'Rest');
      Return True;
    }
  
    Function DeCode($In, $Offset=0, $ResSize=0)
    {
      $this->Input     =$In     ;
      $this->InputLen  =StrLen($In);
      $this->ReadPos   =$Offset ;
      $this->Output    =''; //Str_Repeat(' ', $ResSize)
      $this->OutputLen =$ResSize;
      
      While(!$this->Read_IsEnd())
      {
        $Token     = $this->Read_Byte();
        $nLiterals = $Token >> 4;
        
        if($nLiterals===0xF)
          $nLiterals+=$this->Read_Len();
        
        $R=$this->Read_Str($nLiterals);
        
        If($R===False) Return;
        
        $this->Write($R, 'Read');
        If($this->Read_IsEnd())
          Break;
        
        $Offset      = $this->Read_Offset();
        $MatchLength = $Token & 0xF;
        
        If($MatchLength===0xF)
          $MatchLength+=$this->Read_Len();
          
        $MatchLength += 4;
        
        If(!$this->Copy($Offset, $MatchLength))
          Return False;
      }
      Return $this->Output;
    }
    
  //****************************************************************
  }
?>