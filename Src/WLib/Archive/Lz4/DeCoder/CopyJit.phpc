<?
  $this->Parent_Class('/Archive/Lz4/DeCoder/Concate');

  // Should be faster with JIT
  Class C_Archive_Lz4_DeCoder_CopyJit extends C_Archive_Lz4_DeCoder_Concate
  {
  //****************************************************************
    
    Static Function StrCpy(String &$FromStr, Int $FromPos, String &$ToStr, Int $ToPos, Int $Len)
    {
      if($FromPos      <0                ) return ['Offset out of data from begin ' ];
      if($ToPos        <0                ) return ['Offset out of data to begin'    ];
      if($FromPos +$Len>StrLen($FromStr )) return ['Offset out of data from end'    ];
      if($ToPos   +$Len>StrLen($ToStr   )) return ['Offset out of data to end'      ];
    
      For(; $Len>0; $FromPos++, $ToPos++, $Len--)
        $ToStr[$ToPos]=$FromStr[$FromPos];
    }
    
    Var $WritePos=0;

    Function Read_To($Len)
    {
      $Error=Static::StrCpy(
        $this->Input  ,$this->ReadPos  , 
        $this->Output ,$this->WritePos ,$Len
      );
      
      If($this->Debug)
        $this->Log('Debug', 'Read', ' ', [SubStr($this->Output ,$this->WritePos , $Len)]);
      
      If($Error) Return $this->Log('Error', 'Lz4.Read: ', ...$Error)->Ret(False);

      $this->ReadPos  +=$Len;
      $this->WritePos +=$Len;
      Return True;
    }
    
    Function Copy($Ofs, $Len)
    {
      $Error=Static::StrCpy(
        $this->Output ,$this->WritePos-$Ofs, 
        $this->Output ,$this->WritePos ,$Len
      );
      
      If($this->Debug)
        $this->Log('Debug', 'Copy', ' ', [SubStr($this->Output ,$this->WritePos , $Len)]);
        
      If($Error) Return $this->Log('Error', 'Lz4.Copy: ', ...$Error)->Ret(False);
      
      $this->WritePos+=$Len;
      Return True;
    }
  
    
    // It should be faster
    Function DeCode($In, $Offset=0, $ResSize=0)
    {
      $this->Input     =$In     ;
      $this->InputLen  =StrLen($In);
      $this->ReadPos   =$Offset ;
      $this->Output    =Str_Repeat(' ', $ResSize);
      $this->OutputLen =$ResSize;
      $this->WritePos  =0;
      
      While(!$this->Read_IsEnd())
      {
        $Token     = $this->Read_Byte();
        $nLiterals = $Token>>4;
        
        if($nLiterals===0xF)
          $nLiterals+=$this->Read_Len();
        
        If(!$this->Read_To($nLiterals)) Return False;
        
        If($this->Read_IsEnd())
          Break;
        
        $Offset      = $this->Read_Offset();
        $MatchLength = $Token & 0xF;
        
        If($MatchLength===0xF)
          $MatchLength+=$this->Read_Len();
          
        $MatchLength += 4;
        
        If(!$this->Copy($Offset, $MatchLength))
          Return False;
      }
      Return $this->Output;
    }

  //****************************************************************
  }
?>