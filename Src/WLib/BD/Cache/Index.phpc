<?
  $Loader->Load_Class('/Object');
  
  Class C_BD_Cache_Index extends C_Object
  {
    Var $ByKey    = []; // По ключу находит индексы
    Var $Index    = []; // По индексу находит ключ
    Var $Fields   = [];
    Var $Table    =null;
    Var $IsUnique =False;
    Var $AutoInc  =False;
    
    Function IsPrimary()
    {
      return $this->Table->Primary->Object_Id===$this->Object_Id;
    }
    
    Function SetAutoIncrement($v=1)
    {
    //if(!$this->IsPrimary()) // It's ok
    //  $this->Log('Error', 'Autoincrement shoul be only on primary index');
      $this->SetUnique();
      $this->AutoInc=$v;
    }
    
    Function SetUnique()
    {
      $this->IsUnique=true;
    }
    
    Function GetExprFactory()
    {
      return $this->Table->GetExprFactory();
    }
 
    Function _Init(Array $Args)
    {
      parent::_Init($Args);
    //$this->Fields=(Array)$Args['Fields'];
      $this->Table=$Args['Table'];
      $Fields=$Args['Fields'];
    //$this->ExprFactory=$Args['ExprFactory'];
      $Fields=$this->Table->_MakeFields($Fields);
          
      $this->Fields=$Fields;
    }
 
    Function Clear()
    {
      $this->ByKey=[];
      $this->Index=[];
    }
    
    //****************************************************************
    
    Static Function __Keys_GetFields(Array &$Res, Array $List, Int $c, Array $Fields=[])
    {
      $c--;
      if($c>0)
      {
        ForEach($List As $k=>$v)
        {
          $R=$Fields;
          $R[]=$k;
          Static::__Keys_GetFields($Res, $R, $c, $v);
        }
      }
      Else
      {
        ForEach($List As $k=>$v)
        {
          $R=$Fields;
          $R[]=$k;
          $Res[]=$R;
        }
      }
    }
 
    Static Function __Keys_GetIdx(Array &$Res, Array $ByKey)
    {
      ForEach($ByKey As $k=>$v)
        if(Is_Array($v))
          Static::__Keys_GetIdx($Res, $v);
        elseif(Is_Integer($k))
          $Res[$k]=1;
    }
 
    Static Function _Keys_GetIdx(Array $ByKey)
    {
      $Res=[];
      Static::__Keys_GetIdx($Res, $ByKey);
      Return $Res;
    }
    
    Function _Keys_Get(Array $Key)
    {
      $Res=$this->ByKey;
      ForEach($Key As $v)
        $Res=$Res[$v]??[];
      return $Res;
    }
 
    Function &_Keys_Create(Array $Key)
    {
      $Res=&$this->ByKey;
      ForEach($Key As $v)
      {
        if(!IsSet($Res[$v]))
          $Res[$v]=[];
        $Res=&$Res[$v];
      }
      return $Res;
    }
 
    Static Function __Keys_Remove(Array &$ByKey, Array $Key, $i=0)
    {
      $K=$Key[$i];
      $i++;
      $ByKey2=&$ByKey[$K];
      if(IsSet($Key[$i]))
      {
        $Res=Static::__Keys_Remove($ByKey2, $Key, $i);
        $c=Count($ByKey2);
        if($c<=2)
        {
          if(IsSet($ByKey2['Free'  ])) $c--;
          if(IsSet($ByKey2['Count' ])) $c--;
          if($c===0)
            UnSet($ByKey[$K]);
        }
      }
      else
      {
        $Res=$ByKey2;
        UnSet($ByKey[$K]);
      }
      return $Res;
    }
    
    Function _Keys_Remove(Array $Key, bool $Full=false)
    {
      $Res=Static::__Keys_Remove($this->ByKey, $Key);
      if($Full)
      {
        $c=Count($this->ByKey);
        if($c<=2)
        {
          if(IsSet($this->ByKey['Free'  ])) $c--;
          if(IsSet($this->ByKey['Count' ])) $c--;
          if($c===0) // TODO: &ReuseIds
            $this->ByKey=[];
        }
      }
      return $Res;
    }
 
    //****************************************************************
    Function SearchByKey(Array $Key)
    {
      $Res=$this->_Keys_Get($Key);
      $Res=Static::_Keys_GetIdx($Res);
      return $Res;
    }
 
    Function SearchRec(Array $Rec)
    {
      $Key=$this->_KeyByRec($Rec);
      Return $this->SearchByKey($Key);
    }
 
    Function FieldValues()
    {
      $Res=[];
      Static::__Keys_GetFields($Res, $this->ByKey, Count($this->Fields));
      Return $Res;
    }
 
    Function _KeyByRec($Rec)
    {
      $Key=[];
      ForEach($this->Fields As $k=>$v)
        $Key[$k]=$v->Calc($Rec);
      Return $Key;
    }
 
    Function AddRec($Idx, &$Rec)
    {
      $Key=$this->_KeyByRec($Rec);
      if($this->AutoInc!==False && End($Key)===0)
      {
        $j=Count($Key)-1;
        UnSet($Key[$j]);
        $Res=&$this->_Keys_Create($Key);
        if(!IsSet($Res['Count']))
          $Res['Count']=$this->AutoInc;
        $I=$Res['Count']++;
        End($this->Fields)->Set($Rec, $I);
        $Key[$j]=$I;
      }
      
      If(IsSet($this->Index[$Idx]))
      {
        $OldKey=$this->Index[$Idx];
        If($Key==$OldKey)
          Return;
        $this->_Keys_Remove($OldKey);
      }
      
      $this->Index[$Idx]=$Key;
      $Res=&$this->_Keys_Create($Key);
      $Res[$Idx]=1;
      
      if($this->IsUnique && Count($Res)>1)
        $this->Log('Error', 'Keys [', Implode(', ', $Key), '] is not unique');
    }
 
   #Function Add($Idx, $Data)
   #{
   #  ForEach($Data As $k=>$v)
   #    $this->AddRec($Idx++, $Data[$k]);
   #}
 
    Function PutList($Data)
    {
      $this->Clear();
      ForEach($Data As $k=>$v)
        $this->AddRec($k, $Data[$k]);
    }
 
  # // TODO: Deprecated
  # Function RemoveRecByKey($Key)
  # {
  #   $Res=$this->_Keys_Remove($Key, true);
  #   $Res=Static::_Keys_GetIdx($Res);
  #   ForEach($Res As $k=>$v)
  #     UnSet($this->Index[$k]);
  # }
    
    // TODO: Deprecated?
    Function RemoveRecByIdx($Idx, bool $Full=true)
    {
      $Key=$this->Index[$Idx]?? [];
      If(!$Key)
      {
        $this->Log('Error', 'Key for idx=', $Idx, ' not found');
        Return False;
      }
      $Key[]=$Idx;
      $this->_Keys_Remove($Key, $Full);

      UnSet($this->Index[$Idx]);
      Return True;
    }

    Protected Function _Debug_Info(Array &$Res)
    {
      Parent::_Debug_Info($Res);
    //unset($Res['ExprFactory' ]);
      unset($Res['Table' ]);
    }
    
    Static Function Serialize_Object_Vars(&$Map)
    {
      $Map->RemoveField('Fields'   );
      $Map->RemoveField('Table'    );
      $Map->RemoveField('IsUnique' );
      $Map->RemoveField('AutoInc'  );
    }
    
    Function ToVars()
    {
      $Res=[];
      $Res['ByKey']=$this->ByKey;
      $Res['Index']=$this->Index;
      return $Res;
    }
    
    Function Deserialize_Object($Map)
    {
      $this->ByKey=$Map->_Pop('ByKey');
      $this->Index=$Map->_Pop('Index');
    }
  } 

?>