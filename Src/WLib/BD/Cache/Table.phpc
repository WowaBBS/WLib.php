<?
  $Loader->Load_Class('/Object');

  Class C_BD_Cache_Table extends C_Object
  {
    Var $Data      = [];
    Var $Free      = [];
    Var $Indices   = [];
    Var $IdxByName = [];
    Var $Primary   = null;
    Var $ExprFactory=null;

    Function _GetExprFactory()
    {
      return $this->ExprFactory=$this->Loader->Get_Singleton('/BD/Expr/Factory');
    }
    
    Function GetExprFactory()
    {
      return $this->ExprFactory?? $this->_GetExprFactory();
    }
 
    Function _Init(Array $Args)
    {
      parent::_Init($Args);
      $Fields=$Args['Fields']?? [' ID'];
    }
 
    Function Clear()
    {
    //parent::Clear();
      $this->Data=[];
      ForEach($this->Indices As $Index)
        $Index->Clear();
    }
 
    Function PutList($Data)
    {
      $this->Data=$Data;
      ForEach($this->Indices As $Index)
        $Index->PutList($Data);
    }
    
    Function AddList($Data)
    {
      ForEach($Data As $Rec)
        $this->AddRec($Rec);
    }
    
    Function RemoveRec($Rec)
    {
      $Primary=$this->Primary;
      if(!$Primary)
        return $this->Log('Error', 'No primary index found');

      If($Idx=$Primary->SearchRec($Rec))
      {
        $Idx=Array_Keys($Idx)[0];
        ForEach($this->Indices As $Index)
          $Index->RemoveRecByIdx($Idx);
        UnSet($this->Data[$Idx]);
        $this->Free[]=$Idx;
      }
      Else
        $this->Log('Error', 'No primary index found');
    }
    
    Function AddRec($Rec)
    {
      $Primary=$this->Primary;
      If($Idx=$Primary? $Primary->SearchRec($Rec):[])
      {
        $Idx=Array_Keys($Idx)[0];
        ForEach($this->Indices As $Index)
          $Index->RemoveRecByIdx($Idx, false);
        $this->Data[$Idx]=&$Rec;
      }
      Else
      {
        if($this->Free)
        {
          $Idx=Array_Pop($this->Free);
          $this->Data[$Idx]=&$Rec;
        }
        Else
        {
          $this->Data[]=&$Rec;
          End($this->Data);
          $Idx=Key($this->Data);
        }
      }
      ForEach($this->Indices As $Index)
        $Index->AddRec($Idx, $Rec);
      return $Rec;
    }
 
    Function _GetIndex($Fields, $Name=True, $bCreate=false)
    {
    //$Fields=$this->_MakeFields($Fields);
    //Sort($Fields);
      If($Name===True  ) $Name=Implode(',', $Fields);
      If(!IsSet($this->Indices[$Name]))
      {
        if(!$bCreate)
        {
          $this->Log('Error', 'Cache table hasn`t index for columns ', $Name);
          return NULL;
        }
        $Res=$this->Create_Object('/BD/Cache/Index', ['Fields'=>$Fields, 'Table'=>$this]);
        $Res->PutList($this->Data);
        $this->Indices[$Name]=$Res;
      }
      else
        $Res=$this->Indices[$Name];
      return $Res;
    }
    
    Function _MakeFields($Fields)
    {
      $Fields=Is_Array($Fields)? $Fields:[$Fields];
      
      $ExprFactory=$this->GetExprFactory();
      
      ForEach($Fields As $k=>$Field)
      {
        if(Is_String($Field) || Is_Integer($Field))
          $Field=['Rec', $Field];
        if(Is_Array($Field))
          $Fields[$k]=$ExprFactory->Create($Field);
      }
      return $Fields;
    }
    
    // Создаёт индекс
    Function Create_Index($Fields, $Name=True)
    {
      $Fields=$this->_MakeFields($Fields);
      $Res=$this->_GetIndex($Fields, True, true);
      If($Name===True  ) $Name=Is_Array($Fields)? Implode(',', $Fields):$Fields;
      If($Name!==True  ) $this->IdxByName[$Name]=$Res;
      return $Res;
    }
 
    Function Create_Primary($Fields, $Name=True)
    {
      $Res=$this->Create_Index($Fields, $Name);
      $Res->SetUnique();
      $this->Primary=$Res;
      Return $Res;
    }
    
    Function _ParseQuery($Where, &$Values, &$Fields)
    {
      If(!$Where)
      {
        if($Values)
          $this->Log('Error', 'Query has values without fields');
        Return true;
      }
      if($Values)
        $Fields=$Where;
      else
      {
        $Fields=Array_Keys   ($Where);
        $Values=Array_Values ($Where);
      }
      $Fields=$this->_MakeFields($Fields);
      
    //KSort($Where);
      return false;
    }
    
    Function QueryCount($Where=[], $Values=[])
    {
      $Fields=[];
      If($this->_ParseQuery($Where, $Values, $Fields))
        return Count($this->Data);
    
      If($Index=$this->_GetIndex($Fields))
      {
        return Count($Index->SearchByKey($Values));
      }
      Else
      {
        $this->Log('Error', 'Index for fields [', Implode(',', $Fields), '] not found, TODO: full scan');
      }
      Return $Res;
    }
 
    Function Query($Where=[], $Values=[])
    {
      $this->Log('Error', 'C_BD_Cache_Table::Query is deprecated, please use QueryList');
      return $this->QueryList($Where, $Values);
    }
    
    Function QueryList($Where=[], $Values=[])
    {
      $Fields=[];
      If($this->_ParseQuery($Where, $Values, $Fields))
        return $this->Data;
      
      $Res=[];
      If($Index=$this->_GetIndex($Fields))
      {
        ForEach($Index->SearchByKey($Values)As $k=>$v)
          $Res[]=$this->Data[$k];
      }
      Else
      {
        $this->Log('Error', 'Index for fields [', Implode(',', $Fields), '] not found, full scan');
        $List=$this->Data;
        $A=[];
        ForEach($List As $id=>$Rec)
        {
          $Key=[];
          ForEach($Fields As $k=>$v)
            $Key[$k]=$v->Calc($Rec);
          $A=$Key;
          if($Key===$Values)
            $Res[]=$Rec;
        }
        $this->Debug(['FullScan',
          'Fields'=>$Fields,
          'Values'=>$Values,
          'Result'=>$Res,
          'A'=>$A,
        ]);
      }
      Return $Res;
    }
 
    Function QueryRow($Where=[], $Values=[])
    {
      $Res=$this->QueryList($Where, $Values);
      Switch(Count($Res))
      {
      Case 0: return null;
      Case 1: return $Res[0];
      }
      $this->Log('Error', 'Count more than one: ', Count($Res));
      Return $Res[0];
    }
 
    Function QueryFields($Fields)
    {
      $Fields=$this->_MakeFields($Fields);
      $Index=$this->_GetIndex($Fields);
      Return $Index? $Index->FieldValues():[];
    }

    Protected Function _Debug_Info(Array &$Res)
    {
      Parent::_Debug_Info($Res);
      unset($Res['ExprFactory' ]);
    }

    Static Function Serialize_Object_Vars(&$Map)
    {
      $Map->RemoveField('Primary'     );
      $Map->RemoveField('ExprFactory' );
      $Map->RemoveField('Indices'     );
      $Map->RemoveField('IdxByName'   );
    }

    Function Serialize_Object(Array $Arr)
    {
      $Indices=[];
      ForEach($this->Indices As $k=>$v)
        $Indices[$k]=$v->ToVars();
      $Arr['Indices']=$Indices;
      return $Arr;
    }

    Function Deserialize_Object($Map)
    {
      $Indices=$Map->PopVars('Indices');
      if(!$Indices)
        $Indices=[];
      $Undefined=[];
      ForEach($this->Indices As $k=>$Index)
      {
        if($IndexVars=$Indices->PopVars($k))
          $Index->Deserialize_Object($IndexVars);
        else
          $Undefined[]=$Index;
      }
      ForEach($Undefined As $Index)
        $Index->PutList($this->Data);
    }
  }
?>