<?
  $Loader->Load_Class('/Object');
  $Loader->Load_Type('/BD/Descr/Trait/Types'); // TODO: Load_Trait
 
  Class C_BD_Descr_Table Extends C_Object
  {
    Use T_BD_Descr_Trait_Types;
    
    Var $TableName  =''   ;
    Var $Fields     =[]   ;
    Var $BaseData   =null ;
    Var $Primary    =null ;
    Var $Indices    =[]   ;
    Var $TableClass =null ;
    Var $RowClass   =null ;
    Var $Rows       =[];
  
    Protected Function _Init($Args)
    {
      $this->BaseData  =$Args['BaseData'  ];
      $this->TableName =$Args['TableName' ];
      $this->Update_Descr($Args['Descr']);
      parent::_Init($Args);
    }
    
    Function GetExprFactory()
    {
      return $this->BaseData->GetExprFactory();
    }
 
    Function _MakeFields($Fields)
    {
      $Fields=Is_Array($Fields)? $Fields:[$Fields];
      
      $ExprFactory=$this->GetExprFactory();
      
      ForEach($Fields As $k=>$Field)
      {
        if(Is_String($Field) || Is_Integer($Field))
          $Field=['Rec', $Field];
        if(Is_Array($Field))
          $Fields[$k]=$ExprFactory->Create($Field);
      }
      return $Fields;
    }
    
    Function Create_Field($Name, $Descr)
    {
      $Field=$this->Create_Object('/BD/Descr/Field/Rec', ['Table'=>$this, 'Descr'=>$Descr, 'FieldName'=>$Name]);
      if(IsSet($this->Fields[$Name]))
        $this->Log('Error', 'Field ', $Name, ' already exists');
      return $this->Fields[$Name]=$Field;
    }
    
    Function Create_Eval($Name, $Descr)
    {
      $Field=$this->Create_Object('/BD/Descr/Field/Eval', ['Table'=>$this, 'Descr'=>$Descr, 'FieldName'=>$Name]);
      if(IsSet($this->Fields[$Name]))
        $this->Log('Error', 'Field ', $Name, ' already exists');
      return $this->Fields[$Name]=$Field;
    }
    
    Function Create_Fields($List)
    {
      $Res=[];
      ForEach($List As $Key=>$Descr)
      {
        if(Is_String($Key))
          $Name=$Key;
        ElseIf($Name=$Descr['Name']?? False)
          UnSet($Descr['Name']);
        Else
          $Name=Array_Shift($Descr);
        $Res[$Key]=$this->Create_Field($Name, $Descr);
      }
      return $Res;
    }
    
    Function Create_Index($Descr)
    {
      $Index=$this->Create_Object('/BD/Descr/Index', ['Table'=>$this, 'Descr'=>$Descr]);
      $this->Indices[]=$Index;
      if($Index->Primary)
      {
        if($this->Primary)
          $this->Log('Error', 'Primary index already exists on table ', $this->TableName);
        $this->Primary=$Index;
      }
    }
    
    Function Add_Row($Row)
    {
      $this->Rows[]=$Row;
    }
    
    Function Add_Rows($Rows)
    {
      ForEach($Rows As $Row)
        $this->Add_Row($Row);
    }
    
    Function Update_Descr($Descr)
    {
      ForEach($Descr As $Item)
        Switch($Type=Array_Shift($Item))
        {
        Case 'Field'   : $Name=Array_Shift($Item); $this->Create_Field ($Name, $Item); Break;
        Case 'Eval'    : $Name=Array_Shift($Item); $this->Create_Eval  ($Name, $Item); Break;
        Case 'Fields'  : $this->Create_Fields($Item); Break;
        Case 'Primary' : $Item[]='Primary' ;
        Case 'Unique'  : $Item[]='Unique'  ;
        Case 'Index'   : $this->Create_Index($Item); Break;
        Case 'Row'     : $this->Add_Row($Item); Break;
        Case 'Rows'    : $this->Add_Rows($Item); Break;
        Case 'TableClass' : $this->TableClass = Array_Shift($Item); break;
        Case 'RowClass'   : $this->RowClass   = Array_Shift($Item); break;
        Default:
          $this->Log('Error', 'Descr type "', $Type, '" not found');
        }
    }

    Protected Function _Done()
    {
      parent::_Done();
    }
    
    Function Types_GetParent()
    {
      return $this->BaseData;
    }
    
    Protected Function _Debug_Info(Array &$Res)
    {
      Parent::_Debug_Info($Res);
      unset($Res['BaseData']);
    }
    
  # Function GetField($Name): C_BD_Descr_Field
  # {
  #   If(!IsSet($this->Fields[$Name]))
  #     $this->Fields[$Name]=$this->Manager->Create_Field($this, $Name);
  #   Return $this->Fields[$Name];
  # }
  }
?>