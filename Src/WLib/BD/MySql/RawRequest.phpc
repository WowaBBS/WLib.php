<?
  $Loader->Load_Class('/BD/Base/RawRequest');
 
  Class C_BD_MySql_RawRequest Extends C_BD_Base_RawRequest
  {
    Function sqlTraceSelect($Cmds)
    {
      $Tables='';
      $Where =[];
      $Fields=[];
      $Having=[];
      $Groups=[];
      $Sorts =[];
      $Limit='';
      ForEach($Cmds As $V)
        Switch($V[0])
        {
        Case 'Where'  :       sqlAddWhere($Where  ,$V[1]         ); Break; //$Where  = $V[1] ;
        Case 'Having' :                   $Having =$V[1]          ; Break;
        Case 'Fields' : sqlNormNameFields($Fields ,$V[1], ''     ); Break; //$Fields = $V[1] ;
        Case 'Group'  : $Groups  =ArrConc($Groups ,$V[1]         ); Break;
        Case 'Limit'  :                   $Limit  =$V[1].','.$V[2]; Break;
        Case 'Sort'   : $Sorts    =ArrAdd($Sorts  ,$V[1]         ); Break;
        Case 'Table'  : [$Tmp, $S, $T, $N, $F, $W]=$V;
          Switch($T)
          {
          // 0 - главная
          // 1 - связная для каждого значения
          // ? - связная для одного необязательного значения
          // * - связная подтаблица (пока не реализована)
          Case '0': $Tables  =               $N.' '.$S."\n";  $Fields=[]; $Where= $W ; sqlNormNameFields($Fields, $F, $S); Break;
          Case '1': $Tables .=      ' Join '.$N.' '.$S."\n";  sqlAddWhere($Where, $W); sqlNormNameFields($Fields, $F, $S); Break;
          Case '?': $Tables .= ' Left Join '.$N.' '.$S.' On '.sqlWhere   ($W)."\n"   ; sqlNormNameFields($Fields, $F, $S); Break;
          }
          Break;
        }
     Return [
       'T'=>$Tables,
       'W'=>$Where ,
       'F'=>Array_Reverse($Fields, True),
       'H'=>$Having,
       'G'=>$Groups,
       'S'=>$Sorts ,
       'L'=>$Limit ,
      ];
    }
  }
?>