<?
  // Taken from builder of UE, directory Builder/Lib/Cache
 
  $Loader->Parent_Class('/Cache/Storage/Field');
  
  /// Для каждого $Key выделяет папку или файл с уникальным именем
  /// Проверяет $Hash, если файла нет или хеш не совпадает
  /// Вызывает $Getter и сохраняет результат
  Class C_Cache_EnumDir extends C_Cache_Storage_Field
  {
    Var $RemoveUnChecked =true;
    Var $Cfg     =[];
    Var $Def=[
      'Pad'     =>3     ,
      'NoZero'  =>false ,
      'Split'   =>''    ,
      'Postfix' =>''    ,
      'Zero'    =>''    ,
    ];
    
    Protected Function _Init(Array $Args)
    {
      if(IsSet($Args['Def']))
        $this->Def=$Args['Def']+$this->Def; //+++
      
      if(IsSet($Args['Cfg']))
        ForEach($Args['Cfg']As $NS=>$Def)
          $this->_GetCfg($NS, $Def);
      
     #$this->Debug($Args['Cfg']);
     #$this->Debug($this->Cfg);
      
     #If(IsSet($Args['Pad'    ])||
     #   IsSet($Args['NoZero' ]))
     #  $this->Log('Fatal', 'Pagging setup is not allowed here');
         
      parent::_Init($Args);
    }
    
    Protected Function _Done()
    {
      if($this->RemoveUnChecked)
        $this->RemoveDirty();
      parent::_Done();
    }
    
    Protected Function _Load()
    {
      $Res=Parent::_Load();
      $Vars=&$this->Vars;
      return $Res;
    }
    
    Function _GetCfg(String $NameSpace, Array $Def)
    {
      return $this->Cfg[$NameSpace]=($Def+$this->Def); //+++
    }
    
    Function GetCfg(String $NameSpace, Array $Def)
    {
      return $this->Cfg[$NameSpace]??$this->_GetCfg($NameSpace, $Def);
    }

    Function _AllocNum(Array &$Vars, String $Key, String $NameSpace, Array $Cfg=[])
    {
      if(IsSet($Vars[$Key]))
        return $Vars[$Key];
      $c=Count($Vars);
      $Cfg=$this->GetCfg($NameSpace, $Cfg);
      if($c===0 && $Cfg['NoZero'])
        $Res=$Cfg['Zero'];
      elseif($Cfg['Pad']>1)
        $Res=$Cfg['Split'].str_pad($c, $Cfg['Pad'], '0', STR_PAD_LEFT).$Cfg['Postfix'];
      else
        $Res=$Cfg['Split'].$c.$Cfg['Postfix'];
      $Vars[$Key]=$Res;
      $this->MarkChanged();
      return $Res;
    }
    
    Function AllocNum(String $Key, String $NameSpace='', Array $Cfg=[])
    {
      $this->Load();
      $Vars=&$this->Vars;
      if(!IsSet($Vars[$NameSpace]))
        $Vars[$NameSpace]=[];
      return $this->_AllocNum($Vars[$NameSpace], $Key, $NameSpace, $Cfg);
    }
    
    Function _Alloc(String $Key, String $Prefix='', $Cfg=[])
    {
      return $Prefix.$this->AllocNum($Key, $Prefix, $Cfg);
    }
 
    Function AllocRel(String $Key, String $Prefix='', $Cfg=[])
    {
      $Res=$this->_Alloc($Key, $Prefix, $Cfg);
      return $this->RelPath.$Res;
    }
 
    Function AllocFull(String $Key, String $Prefix='', $Cfg=[])
    {
      $Res=$this->_Alloc($Key, $Prefix, $Cfg);
      return $this->FullPath.$Res;
    }
 
    Function RemoveDirty()
    {
    }

    Function AllocStorage    ($Key, $Prefix='' ,$Args=[]) { return $this->GetStorage    ($this->_Alloc($Key, $Prefix ,$Args)     ,$Args); }
    Function AllocEnumDir    ($Key, $Prefix='' ,$Args=[]) { return $this->GetEnumDir    ($this->_Alloc($Key, $Prefix ,$Args).'/' ,$Args); }
    Function AllocMD5Enum    ($Key, $Prefix='' ,$Args=[]) { return $this->GetMD5Enum    ($this->_Alloc($Key, $Prefix ,$Args).'/' ,$Args); }
    Function AllocMD5Storage ($Key, $Prefix='' ,$Args=[]) { return $this->GetMD5Storage ($this->_Alloc($Key, $Prefix ,$Args).'/' ,$Args); }
    Function AllocMapFile    ($Key, $Prefix='' ,$Args=[]) { return $this->GetMapFile    ($this->_Alloc($Key, $Prefix ,$Args)     ,$Args); }
    Function AllocMapDir     ($Key, $Prefix='' ,$Args=[]) { return $this->GetMapDir     ($this->_Alloc($Key, $Prefix ,$Args).'/' ,$Args); }
    Function AllocSub        ($Key, $Prefix='' ,$Args=[]) { return $this->GetSub        ($this->_Alloc($Key, $Prefix ,$Args).'/' ,$Args); }
    Function AllocMap        ($Key, $Prefix='' ,$Args=[]) { return $this->GetMap        ($this->_Alloc($Key, $Prefix ,$Args).'/' ,$Args); }
  }
?>