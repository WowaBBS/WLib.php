<?  // Taken from builder of UE, directory Builder/Lib/Cache   $Loader->Parent_Class('/Cache/Storage/Field');    /// Для каждого $Key выделяет папку или файл с уникальным именем  /// Проверяет $Hash, если файла нет или хеш не совпадает  /// Вызывает $Getter и сохраняет результат  Class C_Cache_EnumDir extends C_Cache_Storage_Field  {    Var $RemoveUnChecked =true;        Protected Function _Init(Array $Args)    {      parent::_Init($Args);    }        Protected Function _Done()    {      if($this->RemoveUnChecked)        $this->RemoveDirty();      parent::_Done();    }        Protected Function _Load()    {      $Res=Parent::_Load();      $Vars=&$this->Vars;      if(!IsSet($Vars['Key'     ])) $Vars['Key'     ]=[];    //if(!IsSet($Vars['Alloced' ])) $Vars['Alloced' ]=[];      if(!IsSet($Vars['Prefix'  ])) $Vars['Prefix'  ]=[];      return $Res;    }    Function _Alloc($Key, $Prefix='')    {      $this->Load();      $ByKey=&$this->Vars['Key'];      if(IsSet($ByKey[$Key]))        return $ByKey[$Key];      $Prefixes=&$this->Vars['Prefix'];      if(!IsSet($Prefixes[$Prefix]))        $Prefixes[$Prefix]=0;      $Res=$Prefix.str_pad($Prefixes[$Prefix]++, 3, '0', STR_PAD_LEFT);      $ByKey[$Key]=$Res;      $this->MarkChanged();      return $Res;    }     Function AllocRel($Key, $Prefix='')    {      $Res=$this->_Alloc($Key, $Prefix);      return $this->RelPath.$Res;    }     Function AllocFull($Key, $Prefix='')    {      $Res=$this->_Alloc($Key, $Prefix);      return $this->FullPath.$Res;    }     Function RemoveDirty()    {    }    Function AllocStorage    ($Key, $Prefix='' ,$Type=null  ,$Args=[]) { return $this->GetStorage    ($this->_Alloc($Key, $Prefix).'/' ,$Type ,$Args); }    Function AllocEnumDir    ($Key, $Prefix=''                       ) { return $this->GetEnumDir    ($this->_Alloc($Key, $Prefix).'/'              ); }    Function AllocMD5Enum    ($Key, $Prefix=''                       ) { return $this->GetMD5Enum    ($this->_Alloc($Key, $Prefix).'/'              ); }    Function AllocMD5Storage ($Key, $Prefix=''                       ) { return $this->GetMD5Storage ($this->_Alloc($Key, $Prefix).'/'              ); }    Function AllocSub        ($Key, $Prefix=''                       ) { return $this->GetSub        ($this->_Alloc($Key, $Prefix).'/'              ); }    Function AllocMap        ($Key, $Prefix='' ,$bBig=false ,$Args=[]) { return $this->GetMap        ($this->_Alloc($Key, $Prefix).'/' ,$bBig ,$Args); }  }?>