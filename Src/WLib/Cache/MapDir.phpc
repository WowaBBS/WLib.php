<?
  // Taken from builder of UE, directory Builder/Lib/Cache
 
  $Loader->Parent_Class('/Object');
  $Loader->Load_Lib('/FS/Utils');
  
  /// Для каждого $Key создаёт файл с переменными
  /// Проверяет $Hash, если файла нет или хеш не совпадает
  /// Вызывает $Getter и сохраняет результат
  /// Предназначен для хранения большого коричества данных об одном файле.
  Class C_Cache_MapDir extends C_Object
  {
    Var $DirPath ='Cache';
    Var $Checked =[];
    Var $RemoveUnChecked =true;
    
    Function _Init(Array $Args)
    {
      parent::_Init($Args);
      $this->DirPath = $Args[0]??$Args['DirPath']??$this->DirPath;
    }
    
    Function _Done()
    {
      if($this->RemoveUnChecked)
        $this->RemoveDirty();
      parent::_Done();
    }
 
    Function Load()
    {
    }
    
    Function Save()
    {
    }
    
    Function Check($Key)
    {
      if($Key[0]==='/')
        $Key=SubStr($Key, 1);
      $this->Checked[$Key]=true;
    }
    
    Static Function Cache_FileLoad($CacheFile, $Hash, $Getter, $Args=null)
    {
      if(Is_File($CacheFile))
      {
        $Res=Include($CacheFile);
        if($Res['Hash']===$Hash)
          return $Res['Data'];
      }
      $Content=$Getter($Args);
      Self::Cache_FileSave($CacheFile, $Hash, $Content);
      return $Content;
    }
      
    Static Function Cache_FileSave($CacheFile, $Hash, $Content)
    {
      $Res=[
        'Hash'=>$Hash    ,
        'Data'=>$Content ,
      ];
      $Res=''
        .'<?'."\n"
        .'Return'."\n"
        .Var_Export($Res, true).";\n"
        .'?>'
      ;
      CreatePath(GetDirPath($CacheFile));
      File_Put_Contents($CacheFile, $Res);
    }
    
    Function Get($Key, $Hash, $Getter, $Vars=[])
    {
      return Self::Cache_FileLoad($this->GetFilePath($Key), $Hash, $Getter, $Vars);
    }
 
    Function Set($Key, $Hash, $Value)
    {
      return Self::Cache_FileSave($this->GetFilePath($Key), $Hash, $Value);
    }
 
    Function GetFilePath($Key)
    {
      if($Key[0]==='/')
        return $this->DirPath.$Key;
      else
        return $this->DirPath.'/'.$Key;
    }
    
    Function RemoveDirty()
    {
      $Path    =$this->DirPath;
      $Checked =$this->Checked;
      $PathLen =StrLen($Path);
      
      $Stack   =[$Path];
      While(IsSet($Stack[0]))
      {
        $Dir=Array_Pop($Stack);
        If(!Is_Dir($Dir))
          Continue;
        If(!($Handle=OpenDir($Dir)))
          Continue;
      
        $Empty=true;
        while(False !== ($Name=ReadDir($Handle)))
        {
          if($Name==='.'  ) continue;
          if($Name==='..' ) continue;
          
          $DirName=$Dir.'/'.$Name;
          
          if(Is_Dir($DirName))
          {
            Array_Push($Stack, $DirName);
            $Empty=false;
          }
          if(Is_File($DirName))
          {
            $Key=SubStr($DirName, $PathLen+1);
            if(IsSet($Checked[$Key]))
              $Empty=false;
            else
            {
              $this->Log('Log', 'RemoveCache ', $Key);
              UnLink($DirName);
            }
          }
        }
        CloseDir($Handle);
        if($Empty)
          RmDir($Dir);
      }
    }
  }
?>