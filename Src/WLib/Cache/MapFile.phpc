<?  // Taken from builder of UE, directory Builder/Lib/Cache    $Loader->Parent_Class('/Cache/Storage/Field');    /// Для каждого $Key создаёт в файле запись с переменными  /// Проверяет $Hash, если файла нет или хеш не совпадает  /// Вызывает $Getter и сохраняет результат  Class C_Cache_MapFile extends C_Cache_Storage_Field  {    Var $MarkDirtyOnLoad   = true  ;    Var $RemoveDirtyOnDone = true  ;    Var $SortByKey         = true  ;        Function _Init(Array $Args)    {      Parent::_Init($Args);      if($this->LoadOnInit)        $this->Load();    }        Protected Function _Done()    {      If($this->RemoveDirtyOnDone)        $this->RemoveDirty();      Parent::_Done();    }     Protected Function _Save()    {      if($this->SortByKey)        KSort($this->Vars);      Parent::_Save();    }        Function Check($Key)    {      $this->Load();      if(IsSet($this->Vars[$Key]))        UnSet($this->Vars[$Key]['Dirty']);    }        Function Get($Key, $Hash, $Getter, $Args=null)    {      $this->Load();      if(IsSet($this->Vars[$Key]))      {        $Res=$this->Vars[$Key];        if(IsSet($Res['Dirty']))          UnSet($Res['Dirty']);        if($Res['Hash']===$Hash)          return $Res['Data'];      }      $Data=$Getter($Args);      $this->Set($Key, $Hash, $Data);      return $Data;    }     Function Set($Key, $Hash, $Data)    {      $Res=[        'Hash'=>$Hash,        'Data'=>$Data,      ];      $this->Vars[$Key]=$Res;      $this->MarkChanged();    }     Function MarkDirty()    {      ForEach($this->Vars As &$Item)        $Item['Dirty']=true;    }        Function RemoveDirty()    {      $Vars=&$this->Vars;      $IsChanged=false;      ForEach($Vars As $k=>$Item)        if(IsSet($Item['Dirty']))        {          UnSet($Vars[$k]);          $IsChanged=true;        }      if($IsChanged)        $this->MarkChanged();    }  }?>