<?
  $this->Parent_Class('/Object');
  
  Class C_CharSet_Factory Extends C_Object
  {
    Var $List=[
      'UTF-8'    ,
      'UTF-16LE' ,
      'UTF-16BE' ,
      'UTF-32LE' ,
      'UTF-32BE' ,
    ];
    Var $Groups=[
      'Unicode' =>['UTF-8', 'UTF-16', 'UTF-32'],
      'UTF-16'  =>['UTF-16LE', 'UTF-16BE'],
      'UTF-32'  =>['UTF-32LE', 'UTF-32BE'],
    ];
    
    Function _Init($Args)
    {
      $this->List=$Args['CharSets']?? $this->List;
      Parent::_Init($Args);
    }
  
    Function GetCoder($CharSet='', Array $Args=[])
    {
      $Args+=['Checker'=>'Strict', 'Coder'=>'Fast'];
      $Map=$this->GetCodersInfoMap();
      $Info=$Map[$CharSet]?? $this->Log('Error', 'Unsupported charset ', $CharSet)->Ret($Map['']);
      $Res=$this->Create_Object($Info['Class'] ,$Args+$Info);
      Return $Res;
    }
    
    Function GetCoders()
    {
      ForEach($this->GetCharSets()As $CharSet)
        Yield $CharSet=>$this->GetCoder($CharSet);
    }
    
    Function GetCodersInfoMap()
    {
      Return [
        ''         =>['Class'=>'/CharSet/UtfBase'                   ],
        'UTF-8'    =>['Class'=>'/CharSet/Utf8'                      ],
        'UTF-16LE' =>['Class'=>'/CharSet/Utf16' ,'BigEndian'=>False ],
        'UTF-16BE' =>['Class'=>'/CharSet/Utf16' ,'BigEndian'=>True  ],
        'UTF-32LE' =>['Class'=>'/CharSet/Utf32' ,'BigEndian'=>False ],
        'UTF-32BE' =>['Class'=>'/CharSet/Utf32' ,'BigEndian'=>True  ],
      ];
    }
    
    Function GetCharSets() { Return $this->List; }
    
  //****************************************************************
  // Detect
  
    Var $Detectors=['Bom', 'MbString', 'Manual'];
    Var $Default_Detector='MbString';// 'Manual'
  
    Function GetDetectorNames() { Return $this->Detectors; }
    Function GetDetectors($Args=[])
    {
      ForEach($this->GetDetectorNames()As $Name)
        Yield $Name=>$this->GetDetector($Name, $Args);
    }
  
    Function GetDetector($Name='Defaut', $Args=[])
    {
      iF($Name==='Default') $Name=$this->Default_Detector;
      
      If($Detector=$this->Create_Object('/CharSet/Detect/'.$Name, $Args+['Factory'=>$this]))
        Return $Detector;
      $this->Log('Error', 'Unknown Detector ',$Name);
      Return $this->GetDetector('Default', $Args);
    }
  
    Function Detect($S, $Name='Defaut', $Args=[])
    {
      $Detector=$this->GetDetector($Name, $Args);
      Return $Detector->Detect($S);
    }
    
  //****************************************************************
  }
?>