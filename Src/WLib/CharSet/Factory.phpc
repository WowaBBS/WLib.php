<?
  $this->Parent_Class('/Object');
  
  Class C_CharSet_Factory Extends C_Object
  {
    Function GetCoder($CharSet='', Array $Args=[])
    {
      $Args+=['Checker'=>'Strict', 'Coder'=>'Fast'];
      $Map=$this->GetCodersInfoMap();
      $Info=$Map[$CharSet]?? $this->Log('Error', 'Unsupported charset ', $CharSet)->Ret($Map['']);
      $Res=$this->Create_Object($Info['Class'] ,$Args+$Info);
      Return $Res;
    }
    
    Function GetCoders()
    {
      ForEach($this->GetCharSets()As $CharSet)
        Yield $CharSet=>$this->GetCoder($CharSet);
    }
    
    Function GetCodersInfoMap()
    {
      Return [
        ''         =>['Class'=>'/CharSet/UtfBase'                   ],
        'UTF-8'    =>['Class'=>'/CharSet/Utf8'                      ],
        'UTF-16LE' =>['Class'=>'/CharSet/Utf16' ,'BigEndian'=>False ],
        'UTF-16BE' =>['Class'=>'/CharSet/Utf16' ,'BigEndian'=>True  ],
        'UTF-32LE' =>['Class'=>'/CharSet/Utf32' ,'BigEndian'=>False ],
        'UTF-32BE' =>['Class'=>'/CharSet/Utf32' ,'BigEndian'=>True  ],
      ];
    }
    
    Function GetCharSets()
    {
      Return [
        'UTF-8'    ,
        'UTF-16LE' ,
        'UTF-16BE' ,
        'UTF-32LE' ,
        'UTF-32BE' ,
      ];
    }
    
  //****************************************************************
  // Detect
  
    Function Detect($S, $Args)
    {
      If($Args['OnlyBom']?? False)
        Return $this->DetectBom($S);
      $Args+=[
        'MinLen'  =>     4,
        'MaxLen'  =>    16,
        'Bom'     =>  True,
      ];
      
      $Bom     ='';
      $CharSet ='';
      $HasMore =StrLen($S)<$Args['MinLen'];

      ForEach($this->GetCoders()As $CharSet=>$Coder)
      {
      
      }
      
      Return [$Bom, $CharSet, $HasMore];
    }

  //****************************************************************
  // Detect Bom
  //                      (?:\x00(?:\x00(?:\xFE\xFF?|)|)|\xEF(?:\xBB\xBF?|)|\xFE\xFF?|\xFF(?:\xFE(?:\x00\x00?|)|))
    Static $Bom_RegExp="/^(?:\x00(?:\x00(?:\xFE\xFF?)?)?|\xEF(?:\xBB\xBF?)?|\xFE\xFF?|\xFF(?:\xFE(?:\x00\x00?)?)?)/";
    Static $Bom_CheckMap=[
      "\x00\x00\xFE\xFF" =>["\x00\x00\xFE\xFF" ,'UTF-32BE' ,False ],
      "\x00\x00\xFE"     =>[''                 ,''         ,True  ],
      "\x00\x00"         =>[''                 ,''         ,True  ],
      "\x00"             =>[''                 ,''         ,True  ],
      "\xEF\xBB\xBF"     =>["\xEF\xBB\xBF"     ,'UTF-8'    ,False ],
      "\xEF\xBB"         =>[''                 ,''         ,True  ],
      "\xEF"             =>[''                 ,''         ,True  ],
      "\xFE\xFF"         =>["\xFE\xFF"         ,'UTF-16BE' ,False ],
      "\xFE"             =>[''                 ,''         ,True  ],
      "\xFF\xFE\x00\x00" =>["\xFF\xFE\x00\x00" ,'UTF-32LE' ,False ],
      "\xFF\xFE\x00"     =>["\xFF\xFE"         ,'UTF-16LE' ,True  ],
      "\xFF\xFE"         =>["\xFF\xFE"         ,'UTF-16LE' ,True  ],
      "\xFF"             =>[''                 ,''         ,True  ],
      ''                 =>[''                 ,''         ,True  ],
      ' '                =>[''                 ,''         ,False ],
    ];
        
    Function DetectBom($S)
    {
      If($S==='') Return ['', '', True];
      
      Switch($S[0])
      {
      Case "\x00": $Bom="\x00\x00\xFE\xFF" ; $CharSet='UTF-32BE' ; Break;
      Case "\xEF": $Bom="\xEF\xBB\xBF"     ; $CharSet='UTF-8'    ; Break;
      Case "\xFE": $Bom="\xFE\xFF"         ; $CharSet='UTF-16BE' ; Break;
      Case "\xFF": $Bom="\xFF\xFE\x00\x00" ; $CharSet='UTF-32LE' ; Break;
      Default: Return ['', '', False];
      }
      $l=StrSpn($S^$Bom ,"\0");
      $HasMore=$l===StrLen($S) && $l<StrLen($Bom);
    //$this->Log('Debug')->Debug([$S, $Bom, $l]);
      If($l<StrLen($Bom))
      {
        If($CharSet==='UTF-32LE' && $l>=2)
        {
          $Bom     ="\xFF\xFE";
          $CharSet ='UTF-16LE';
        }
        Else
        {
          $Bom     ='';
          $CharSet ='';
        }
      }

      Return [$Bom, $CharSet, $HasMore];
    }

  //****************************************************************
  }
?>