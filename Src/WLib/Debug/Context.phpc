<?
  $Loader->Parent_Class('/Object');
  // Taken from builder of UE, directory Builder/Lib/Debug
  
  Class C_Debug_Context extends C_Object
  {
    Var $Stream;
    Var $Level=-1; 
    Var $Tab="\n";
    Var $Template;
    Var $Manager;
    Var $IsInline=0;
    Var $WriteLn=false;
    
    Function _Init(Array $Args)
    {
      parent::_Init($Args);
      
      $Manager =$Args['Manager' ];
      $Stream  =$Args['Stream'  ];
    
      $this->Manager  =$Manager  ;
      $this->Stream   =$Stream   ;
      $this->Template =$Manager->Template ;
      $this->Level    =$Manager->Level    ;
    }
    
    Function IsInline() { return $this->IsInline>0; }
    Function Inline_Begin() { $this->IsInline++; }
    Function Inline_End() { $this->IsInline--; }
    Function NoInline() { $Res=$this->IsInline; $this->IsInline=0; return $Res; }
    Function EndNoInline($SaveInline) { $this->IsInline=$SaveInline; }
    
    Function Level_End() { return $this->Level=0; }
    Function Level_Inc() { $this->Level--; }
    Function Level_Dec() { $this->Level++; }
    
    Function Tab_Push($AddTab)
    {
      if($this->IsInline>0) return false;
      if(StrLen($AddTab)==0) return false;
      $Tab=&$this->Tab;
      $OldTab=$Tab; $Tab.=$AddTab;
      return $OldTab;
    }
    
    Function Tab_Pop($OldTab) { if($OldTab!==false) $this->Tab=$OldTab; }
    
    Function Write($s)
    {
      if($s==='') return;
      $Stream=$this->Stream;
      $WriteLn=&$this->WriteLn;
      if($WriteLn)
      {
        $WriteLn=false;
        $Stream->Write($this->Tab);
      }
      $Lines=Explode("\n", $s);
      if(Count($Lines)==1)
        return $Stream->Write($s);
      $Last=Array_Pop($Lines);
      if(StrLen($Last)==0)
      {
        $Last=Array_Pop($Lines);
        $WriteLn=true;
      }
      $Tab=$this->Tab;
      ForEach($Lines As $Line)
      {
        $Stream->Write($Line);
        $Stream->Write($Tab);
      }
      $Stream->Write($Last);
    }
    
    Function WriteLn($s='')
    {
      $this->Write($s);
      if($this->IsInline<=0)
        $this->WriteLn=true;
    }
    
    Function Flush() {}
    
    Function Debug($v)
    {
      $this->Value($v);
      $this->Stream->Write("\n");
      $this->Flush();
    }
 
    Function Value($v)
    {
      $this->Template->Value($this, $v);
    }
 
    Function CallFunc($Func, $Args)
    {
      $this->Template->CallFunc($this, $Func, $Args);
    }
   
    Function NewClass($Class, $Args)
    {
      $this->CallFunc('new '.$Class, $Args);
    }
 
    Function Inline_CallFunc($Func, $Args)
    {
      $this->Inline_Begin();
      $this->CallFunc($Func, $Args);
      $this->Inline_End();
    }
   
    Function Inline_NewClass($Class, $Args)
    {
      $this->Inline_Begin();
      $this->NewClass($Class, $Args);
      $this->Inline_End();
    }

    Function NoInline_CallFunc($Func, $Args)
    {
      $Save=$this->NoInline();
      $this->CallFunc($Func, $Args);
      $this->EndNoInline($Save);
    }
   
    Function NoInline_NewClass($Class, $Args)
    {
      $Save=$this->NoInline();
      $this->NewClass($Class, $Args);
      $this->EndNoInline($Save);
    }
  }
?>