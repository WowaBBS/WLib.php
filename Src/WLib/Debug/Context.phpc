<? // TODO: Remove
  $Loader->Parent_Class('/Object');
  // Taken from builder of UE, directory Builder/Lib/Debug
  
  Class C_Debug_Context extends C_Object
  {
    Var $Stream   ;
    
    //****************************************************************
    // Level
    Var $Level    =-1;
    
    Function Level_End() { return $this->Level=0; }
    Function Level_Inc() { $this->Level--; }
    Function Level_Dec() { $this->Level++; }
    
    //****************************************************************
    // Debug

    Function Debug($v, $Level=false)
    {
      $SaveLevel=$this->Level;
      if($Level!==false)
        $this->Level=$Level;
      $this->Value($v);
      $this->Stream->Write("\n");
      $this->Flush();
      $this->Level=$SaveLevel;
    }
 
    //****************************************************************
    // Inline
    
    Var $IsInline =0;
    
    Function IsInline() { return $this->IsInline>0; }
    Function Inline_Begin() { $this->IsInline++; }
    Function Inline_End() { $this->IsInline--; }
    Function NoInline() { $Res=$this->IsInline; $this->IsInline=0; return $Res; }
    Function EndNoInline($SaveInline) { $this->IsInline=$SaveInline; }
    
    //****************************************************************
    Var $Template =null;
    
    Function Value($v)
    {
      $this->Template->Value($this, $v);
    }
 
    Function CallFunc($Func, $Args)
    {
      $this->Template->CallFunc($this, $Func, $Args);
    }
   
    Function NewClass($Class, $Args)
    {
      $this->CallFunc('new '.$Class, $Args);
    }
 
    Function Inline_CallFunc($Func, $Args)
    {
      $this->Inline_Begin();
      $this->CallFunc($Func, $Args);
      $this->Inline_End();
    }
   
    Function Inline_NewClass($Class, $Args)
    {
      $this->Inline_Begin();
      $this->NewClass($Class, $Args);
      $this->Inline_End();
    }

    Function NoInline_CallFunc($Func, $Args)
    {
      $Save=$this->NoInline();
      $this->CallFunc($Func, $Args);
      $this->EndNoInline($Save);
    }
   
    Function NoInline_NewClass($Class, $Args)
    {
      $Save=$this->NoInline();
      $this->NewClass($Class, $Args);
      $this->EndNoInline($Save);
    }
    
    //****************************************************************
    // Tab
    
    Var $Tab      ="\n";

    Function Tab_Push($AddTab)
    {
      if($this->IsInline>0) return false;
      if(StrLen($AddTab)==0) return false;
      $Tab=&$this->Tab;
      $OldTab=$Tab; $Tab.=$AddTab;
      return $OldTab;
    }
    
    Function Tab_Pop($OldTab) { if($OldTab!==false) $this->Tab=$OldTab; }
    
    //****************************************************************
  //Var $Manager  ;
    Var $WriteLn  =false;
    
    Function _Init(Array $Args)
    {
      parent::_Init($Args);
      
      $Manager =$Args['Manager' ];
      $Stream  =$Args['Stream'  ];
    
    //$this->Manager  =$Manager  ;
      $this->Stream   =$Stream   ;
      $this->Template =$Manager->Template ;
      $this->Level    =$Manager->Level    ;
    }
    
    Function _Write($v)
    {
      if($v==='') return;
      
      if($this->WriteLn)
      {
        $this->WriteLn=false;
        $this->Stream->Write($this->Tab);
      }
      if(($p=StrPos($v, "\n"))!==False)
      {
        $Lines=Explode("\n", $v);
        $v=Array_Pop($Lines);
        if(StrLen($v)===0)
        {
          $v=Array_Pop($Lines);
          $this->WriteLn=true;
        }
        $Tab=$this->Tab;
        ForEach($Lines As $Line)
        {
          $Stream->Write($Line);
          $Stream->Write($Tab);
        }
      }
      
      $this->Stream->Write($v);
    }
    
    Function Write($s)
    {
      $this->_Write($s);
    }
    
    Function WriteLn($s='')
    {
      $this->Write($s);
      if($this->IsInline<=0)
        $this->WriteLn=true;
    }
    
    Function WriteOp    ($v) { return $this->Write($v); } // Operator
    Function WriteStr   ($v) { return $this->Write($v); } // String
    Function WriteResvd ($v) { return $this->Write($v); } // Reserved word
    Function WriteFunc  ($v) { return $this->Write($v); } // 
    Function WriteBool  ($v) { return $this->Write($v); } // 
    Function WriteNum   ($v) { return $this->Write($v); } // 
    Function WriteFloat ($v) { return $this->Write($v); } // 
    Function WriteType  ($v) { return $this->Write($v); } // 
    Function WriteNull  ($v=null) { return $this->Write($v?? 'Null'); } // 
    
    Function Flush() {}
  }
?>