<?
  $Loader->Parent_Class('/Object');
  $Loader->Load_Type('/Debug/Timer' );
  $Loader->Load_Type('/Debug/TimerItem'   );

  class C_Debug_Performance extends C_Object
  {
    Var $Agregate =[];
    Var $Total;
  
    Function _Init(Array $Args)
    {
      Parent::_Init($Args);
      $this->Total=$this->Start([
        'Name'   =>'Total',
        'Logger' =>null,
      ]);
      $this->Total->Manager=null;
    }
    
    Function _Done()
    {
      $this->GetItem('Total')->Time=0;
    //$this->Total->Logger  =$this;
      $this->Total->Manager =$this;
      $this->Total->Finish();
      $this->Total=null;
      $Log=$this->Log('Log', 'It took:');
      $List=$this->Agregate;
      $LenKey   =0;
      $LenTime  =0;
      $LenCount =0;
      ForEach($List As $Key=>$Item)
      {
        $Item->MakeStr();
        $LenKey   =Max($LenKey   ,StrLen($Key            ));
        $LenTime  =Max($LenTime  ,StrLen($Item->TimeStr  ));
        $LenCount =Max($LenCount ,StrLen($Item->CountStr ));
      }
      ForEach($List As $Key=>$Item)
        $Log('  ', 
          Str_Pad($Key, $LenKey), ' : ', 
          Str_Pad($Item->TimeStr, $LenTime, ' ', STR_PAD_LEFT),
          $Item->Count>1? Str_Pad($Item->CountStr, $LenCount+1, ' ', STR_PAD_LEFT):''
        );
      $Log->Done();
      Parent::_Done();
    }
    
    Function Start($Args)
    {
      $Args['Manager']=$this;
      $Res=new T_Debug_Timer($Args);
      $Res->Start();
      return $Res;
    }
    
    Function GetItem($Name) { return $this->Agregate[$Name]??=new T_Debug_TimerItem(); }
    
    Function Update($Name, $Time, $Count=1)
    {
      $this->GetItem($Name)->Update($Time, $Count);
    }
  };
?>