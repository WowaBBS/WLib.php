<?
  // Taken from builder of UE, directory Builder/Lib/Debug
  $Loader->Parent_Class('/Object');

  Class C_Debug_Template extends C_Object
  {
    Var $Skip    ='..';
    Var $AddTab  ='  ';
    Var $Slashes =[
      '"'  => '\"',
      "\0" => '\0',
      "\t" => '\t',
      "\r" => '\r',
      "\n" => '\n',
      "\\" => '\\\\',
      "\$" => '\$',
      "\{" => '\{',
    ];
    Var $BinarySignReg='/[^\t\r\n\x20-\xF8]/';
    Var $ChunkLen=64;
    Var $StrMaxLen=256;
 
    Function Value($Ctx, $Value)
    {
    //$Ctx->Write('<'.$Ctx->Level.'>');
    # If($Ctx->Level_End())
    # {
    #   $Ctx->WriteOp($this->Skip);
    #   Return;
    # }
      $_TOV=GetType($Value);
      Switch($_TOV)
      {
      Case 'boolean'           : $this->Boolean        ($Ctx, $Value); break;
      Case 'integer'           : $this->Integer        ($Ctx, $Value); break;
      Case 'double'            : $this->Double         ($Ctx, $Value); break;
      Case 'string'            : $this->String         ($Ctx, $Value); break;
      Case 'object'            : $this->Object         ($Ctx, $Value); break;
      Case 'array'             : $this->Array          ($Ctx, $Value); break;
      Case 'NULL'              : $this->Null           ($Ctx, $Value); break;
      Case 'resource'          : $this->Resource       ($Ctx, $Value); break;
      Case 'resource (closed)' : $this->ClosedResource ($Ctx, $Value); break;
    //Case 'float'             : $this->Float          ($Ctx, $Value); break; //TODO: Remove?
      Case 'unknown type'      : $this->UnKnown        ($Ctx, $Value); break;
    //Case 'user function'     : $this->Function       ($Ctx, $Value); break; //TODO: Remove?
      Default                  : $this->UnKnownType    ($Ctx, $Value); break;
      }
    }
 
    Function Boolean        ($Ctx, $v         ) { $Ctx->WriteBool  ($v? 'True':'False'); }
    Function Integer        ($Ctx, $v         ) { $Ctx->WriteNum   ((String)$v); }
    Function Double         ($Ctx, $v         ) { $Ctx->WriteFloat ((String)$v); }
    Function Float          ($Ctx, $v         ) { $Ctx->WriteFloat ((String)$v); }
    Function Resource       ($Ctx, $v, $T=null) { $Ctx->WriteType  ($T?? 'Resource '); $Ctx->WriteName(Get_Resource_Type($v)); $Ctx->WriteOp('('); $Ctx->Write((String)$v); $Ctx->WriteOp(')'); }
    Function ClosedResource ($Ctx, $v         ) { $this->Resource  ($Ctx, $v, 'ClosedResource '); }
    Function Null           ($Ctx, $v         ) { $Ctx->WriteNull  ('Null'         ); }
    Function Function       ($Ctx, $v         ) { $Ctx->WriteResvd ('Function '    ); $Ctx->Write($v); }
    Function UnKnown        ($Ctx, $v         ) { $Ctx->WriteResvd ('UnKnown '     ); $Ctx->Write($v); }
    Function UnKnownType    ($Ctx, $v         ) { $Ctx->WriteResvd ('UnKnownType ' ); $Ctx->Write(GetType($v)); $Ctx->Write($v);  }
    
    Function AddSlashes($v) { return StrTr($v, $this->Slashes); }
  //Function IsBinary($v) { return StrLen(StrPBRK($v, $this->BinarySign))!==false; }
    Function IsBinary($v) { return Preg_Match($this->BinarySignReg, $v)==1; }
    Function IsMultiString($v) { return StrPos($v, "\n")!==false; }
    
    Function Str2Str($v)
    {
      if(StrPbrk($v, "\0\t\r\n")!==False)
        return '"'.$this->AddSlashes($v).'"';
      return '\''.StrTr($v, ['\\'=>'\\\\', '\''=>'\\\'']).'\'';
    }
    
    Function String_Chunk($Ctx, $v, $Len)
    {
      $Ctx->WriteStr("''.\n");
      $SaveInline=$Ctx->NoInline();
      $OldTab=$Ctx->Tab_Push($this->AddTab);
      $List=str_split($v, $Len);
      $Last=Array_Pop($List);
      ForEach($List As $Chunk)
        $Ctx->WriteStr($this->Str2Str($Chunk).'.'."\n");
      $Ctx->WriteStr($this->Str2Str($Last));
      $Ctx->Tab_Pop($OldTab);
      $Ctx->EndNoInline($SaveInline);
    }
    
    Function MultiString($Ctx, $v)
    {
      $Ctx->WriteStr("''.\n");
      $SaveInline=$Ctx->NoInline();
      $OldTab=$Ctx->Tab_Push($this->AddTab);
      $List=Explode("\n", $v);
      $Last=Array_Pop($List);
      ForEach($List As $Chunk)
        $Ctx->WriteStr($this->Str2Str($Chunk."\n").'.'."\n");
      $Ctx->WriteStr($this->Str2Str($Last));
    //$Ctx->WriteStr("''");
      $Ctx->Tab_Pop($OldTab);
      $Ctx->EndNoInline($SaveInline);
    }
    
    Function String($Ctx, $v)
    {
    //if($Ctx->IsInline())
    //  $Ctx->WriteStr($this->Str2Str($v));
      $IsBinary =$this->IsBinary($v);
      $IsMulti  =!$IsBinary && $this->IsMultiString($v);
      $l=StrLen($v);
      if($l<$this->StrMaxLen && !$IsMulti)
        $Ctx->WriteStr($this->Str2Str($v));
      elseif($IsBinary)
        $this->String_Chunk($Ctx, $v, $this->ChunkLen);
      else
        $this->MultiString($Ctx, $v);
    }
    
    Function Array($Ctx, $Value)
    {
      if(!Count($Value))
      {
        $Ctx->WriteOp('[]');
        return;
      }
      $Ctx->WriteOp('[');
      $Ctx->WriteLn();
      $OldTab=$Ctx->Tab_Push($this->AddTab);
      $this->ArrayBody($Ctx, $Value);
      if(!$Ctx->IsInline() && !$Ctx->Level_End())
        $Ctx->WriteOp(',');
      $Ctx->Tab_Pop($OldTab);
      $Ctx->WriteLn();
      $Ctx->WriteOp(']');
    }
    
    Function Object($Ctx, $Value)
    {
      $Class=Get_Class($Value);
      if($Ctx->Manager->ProcessClass($Ctx, $Class, $Value))
        return;
      $this->ObjectDefault($Ctx, $Class, $Value);
    }
 
    Function ArrayBody($Ctx, $Value)
    {
    //$Ctx->WriteLn();
      If($Ctx->Level_End())
      {
        $Ctx->WriteOp($this->Skip);
        Return;
      }
      $PathIdx=Count($Ctx->Path);
      $Idx=0;
      $Separator=$Ctx->IsInline()? ' ':'';
      $z=True;
      ForEach($Value As $k=>$V)
      {
        $Ctx->Path[$PathIdx]=$k;

        if($z)
          $z=False;
        Else //if($Idx!==0)
        {
          $Ctx->WriteOp(',');
          $Ctx->WriteLn($Separator);
        }
        if($Idx!==$k)
        {
        //$Idx=null;
          $this->Value($Ctx, $k);
          $Ctx->WriteOp('=>');
        }
        If(Is_Integer($k) && $k>=$Idx)
          $Idx=$k+1;
           
        $Ctx->Level_Inc();
        $this->Value($Ctx, $V);
        $Ctx->Level_Dec();
      }
      
      UnSet($Ctx->Path[$PathIdx]);
    }
    
    Function GetObjectVars($Value)
    {
    //$Res=Get_Object_Vars($Value);
      $Res=[];
      ForEach((Array)$Value As $k=>$v)
      {
        $k=Explode("\0", $k);
        $Res[End($k)]=$v;
      }
      if(!($Value InstanceOf FFI\CData))
      if(Method_Exists($Value, '_Debug_Serialize'))
        $Value->_Debug_Serialize($Res);
      return $Res;
    }
    
    Function ObjectDefault($Ctx, $Class, $Value)
    {
      $Ctx->WriteResvd('new ');
      $Ctx->WriteClass($Class);
      $Ctx->WriteOp('(');
      $Recursive=&$Ctx->Recursive[Spl_Object_Id($Value)];
      if(Is_Null($Recursive))
      {
        $Recursive=Count($Ctx->Path);
        $v=$this->GetObjectVars($Value);
        $this->Value($Ctx, $v);
        If(Is_Int($Recursive))
          $Recursive=Null;
      }
      Else
      {
        if(Is_Int($Recursive))
          $Recursive=Array_Slice($Ctx->Path, 0, $Recursive);
        $Ctx->WriteRecursive($Recursive);
      }
      $Ctx->WriteOp(')');
    }
 
    Function CallFunc($Ctx, $Func, $Args)
    {
      if(Is_Object($Args)) $Args=$this->GetObjectVars($Args);
      if(Is_Array($Args))
      {
        $Ctx->WriteFunc($Func);
        $Ctx->WriteOp('(');
        $this->ArrayBody($Ctx, $Args);
        $Ctx->WriteOp(')');
      }
      else
      {
        $Ctx->WriteFunc($Func);
        $Ctx->WriteOp('(');
        $Ctx->Write($Args);
        $Ctx->WriteOp(')');
      }
    }
   
    Function NewClass($Ctx, $Class, $Args)
    {
      $Ctx->WriteResvd('new ');
      $this->CallFunc($Ctx, $Class, $Args);
    }
  }
?>