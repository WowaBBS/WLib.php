<?
  // Taken from builder of UE, directory Builder/Lib/Debug
  $Loader->Parent_Class('/Object');

  Class C_Debug_Template extends C_Object
  {
    Var $Skip    ='..';
    Var $AddTab  ='  ';
    Var $Slashes =[
       '"'  => '\"',
       "\0" => '\0',
       "\t" => '\t',
       "\r" => '\r',
       "\n" => '\n',
       "\\" => '\\\\',
       "\$" => '\$',
       "\{" => '\{',
     ];
    Var $BinarySignReg='/[^\t\r\n\x20-\xF8]/';
    Var $ChunkLen=64;
    Var $StrMaxLen=256;
 
    Function Value($Ctx, $Value)
    {
    //$Ctx->Write('<'.$Ctx->Level.'>');
      If($Ctx->Level_End())
      {
        $Ctx->WriteOp($this->Skip);
        Return;
      }
      $_TOV=GetType($Value);
      Switch($_TOV)
      {
      Case 'boolean'       : $this->Boolean  ($Ctx, $Value); break;
      Case 'integer'       : $this->Integer  ($Ctx, $Value); break;
      Case 'double'        : $this->Double   ($Ctx, $Value); break;
      Case 'string'        : $this->String   ($Ctx, $Value); break;
      Case 'object'        : $this->Object   ($Ctx, $Value); break;
      Case 'array'         : $this->Array    ($Ctx, $Value); break;
      Case 'NULL'          : $this->Null     ($Ctx, $Value); break;
      Case 'resource'      : $this->Resource ($Ctx, $Value); break;
      Case 'float'         : $this->Float    ($Ctx, $Value); break;
      Case 'unknown type'  : $this->UnKnown  ($Ctx, $Value); break;
      Case 'user function' : $this->Function ($Ctx, $Value); break;
      Default:
        $_f='T'.$_TOV;
        $this->$_f($Ctx, $Value);
      }
    }
 
    Function Boolean  ($Ctx, $v) { $Ctx->WriteBool  ($v? 'True':'False'); }
    Function Integer  ($Ctx, $v) { $Ctx->WriteNum   ((String)$v); }
    Function Double   ($Ctx, $v) { $Ctx->WriteFloat ((String)$v); }
    Function Float    ($Ctx, $v) { $Ctx->WriteFloat ((String)$v); }
    Function Resource ($Ctx, $v) { $Ctx->WriteType  ('Resource '); $Ctx->WriteName(Get_Resource_Type($v)); $Ctx->WriteOp('('); $Ctx->Write((String)$v); $Ctx->WriteOp(')'); }
    Function Null     ($Ctx, $v) { $Ctx->WriteNull  ('Null'); }
    Function Function ($Ctx, $v) { $Ctx->WriteResvd ('Function '); $Ctx->Write($v); }
    Function UnKnown  ($Ctx, $v) { $Ctx->WriteResvd ('UnKnown '); $Ctx->Write($v);  }
    
    Function AddSlashes($v) { return StrTr($v, $this->Slashes); }
  //Function IsBinary($v) { return StrLen(StrPBRK($v, $this->BinarySign))!==false; }
    Function IsBinary($v) { return Preg_Match($this->BinarySignReg, $v)==1; }
    Function IsMultiString($v) { return StrPos($v, "\n")!==false; }
    
    Function String_Chunk($Ctx, $v, $Len)
    {
      $Ctx->WriteStr("''.\n");
      $SaveInline=$Ctx->NoInline();
      $OldTab=$Ctx->Tab_Push($this->AddTab);
      $List=str_split($v, $Len);
      $Last=Array_Pop($List);
      ForEach($List As $Chunk)
      {
        $Ctx->WriteStr('"'.$this->AddSlashes($Chunk).'".'."\n");
      }
      $Ctx->WriteStr('"'.$this->AddSlashes($Last).'"');
      $Ctx->Tab_Pop($OldTab);
      $Ctx->EndNoInline($SaveInline);
    }
    
    Function MultiString($Ctx, $v)
    {
      $Ctx->WriteStr("''.\n");
      $SaveInline=$Ctx->NoInline();
      $OldTab=$Ctx->Tab_Push($this->AddTab);
      $List=explode("\n", $v);
      $Last=Array_Pop($List);
      ForEach($List As $Chunk)
        $Ctx->WriteStr('"'.$this->AddSlashes($Chunk).'\\n".'."\n");
      $Ctx->WriteStr('"'.$this->AddSlashes($Last).'"');
    //$Ctx->WriteStr("''");
      $Ctx->Tab_Pop($OldTab);
      $Ctx->EndNoInline($SaveInline);
    }
    
    Function String($Ctx, $v)
    {
    //if($Ctx->IsInline())
    //  $Ctx->WriteStr('"'.$this->AddSlashes($v).'"');
      $IsBinary =$this->IsBinary($v);
      $IsMulti  =!$IsBinary && $this->IsMultiString($v);
      $l=StrLen($v);
      if($l<$this->StrMaxLen && !$IsMulti)
        $Ctx->WriteStr('"'.$this->AddSlashes($v).'"');
      elseif($IsBinary)
        $this->String_Chunk($Ctx, $v, $this->ChunkLen);
      else
        $this->MultiString($Ctx, $v);
    }
    
    Function Array($Ctx, $Value)
    {
      if(!Count($Value))
      {
        $Ctx->WriteOp('[]');
        return;
      }
      $Ctx->WriteOp('[');
      $Ctx->WriteLn();
      $OldTab=$Ctx->Tab_Push($this->AddTab);
      $this->ArrayBody($Ctx, $Value);
      if(!$Ctx->IsInline())
        $Ctx->WriteOp(',');
      $Ctx->Tab_Pop($OldTab);
      $Ctx->WriteLn();
      $Ctx->WriteOp(']');
    }
    
    Function Object($Ctx, $Value)
    {
      $Class=Get_Class($Value);
      if($Ctx->Manager->ProcessClass($Ctx, $Class, $Value))
        return;
      $this->ObjectDefault($Ctx, $Class, $Value);
    }
 
    Function ArrayBody($Ctx, $Value)
    {
    //$Ctx->WriteLn();
      $Idx=0;
      ForEach($Value As $k=>$V)
      {
        if($Idx!==0)
          $Ctx->WriteLn($Ctx->IsInline()? ', ':',');
        if($Idx===$k)
          $Idx++;
        else
        {
          $Idx=null;
          $this->Value($Ctx, $k);
          $Ctx->WriteOp('=>');
        }
        $Ctx->Level_Inc();
        $this->Value($Ctx, $V);
        $Ctx->Level_Dec();
      }
    }
    
    Function GetObjectVars($Value)
    {
    //$Res=Get_Object_Vars($Value);
      $Res=[];
      ForEach((Array)$Value As $k=>$v)
      {
        $k=Explode("\0", $k);
        $Res[End($k)]=$v;
      }
      if(Method_Exists($Value, '_Debug_Serialize'))
        $Value->_Debug_Serialize($Res);
      return $Res;
    }
    
    Function ObjectDefault($Ctx, $Class, $Value)
    {
      $Ctx->WriteResvd('new ');
      $Ctx->WriteClass($Class);
      $Ctx->WriteOp('(');
      $v=$this->GetObjectVars($Value);
      $this->Value($Ctx, $v);
      $Ctx->WriteOp(')');
    }
 
    Function CallFunc($Ctx, $Func, $Args)
    {
      if(Is_Object($Args)) $Args=$this->GetObjectVars($Args);
      if(Is_Array($Args))
      {
        $Ctx->WriteFunc($Func);
        $Ctx->WriteOp('(');
        $this->ArrayBody($Ctx, $Args);
        $Ctx->WriteOp(')');
      }
      else
      {
        $Ctx->WriteFunc($Func);
        $Ctx->WriteOp('(');
        $Ctx->Write($Args);
        $Ctx->WriteOp(')');
      }
    }
   
    Function NewClass($Ctx, $Class, $Args)
    {
      $Ctx->WriteResvd('new ');
      $this->CallFunc($Ctx, $Class, $Args);
    }
  }
?>