<?
  $Loader->Parent_Class('/Object');
  $Loader->Load_Type('/FS/Driver/Node');
  $Loader->Load_Type('/Inet/Url');
 
  Class C_FS_Attr_Manager Extends C_Object
  {
    Var $List=[];
    
    Static Function _GetN(&$Vars, $Name, $Def=Null)
    {
      If(!Array_Key_Exists($Name, $Vars)) Return $Def;
      $Res=$Vars[$Name];
      UnSet($Vars[$Name]);
      Return $Res;
    }
  
    Static Function _GetI(&$Vars, $Name, $Def=Null)
    {
      If(Array_Key_Exists($Name, $Vars)) Return Static::_GetN($Vars, $Name, $Def);
      If(!$Vars) Return $Def;
      ForEach($Vars As $k=>$v)
        Break;
      If($k!==0) Return $Def;
      Array_Shift($Vars);
      Return $v;
    }
  
    Function Register($List)
    {
      ForEach($List As $Id=>$Info)
        If(!$this->Add($Id, $Info))
          $this->Log('Error', 'Unknown item ', $Id)->Debug($Info);
    }
    
    Function Add($Name, $Info)
    {
      $Id=$Name;
      If(!Is_String($Id))
      {
        If(!Is_Array($Info))
          Return $this->AddSetter($Info);
        $Name=Static::_GetI($Info, 'Name');
      }
      If(!Is_String($Name)) Return False;

      If(!Is_Array($Info))
        $Info=[$Info];
        
      $Item=$this->List[$Name]??=$this->Create_Object('/FS/Attr/Item', ['Manager'=>$this, 'Name'=>$Name]);
      
      $Args=[
        'Getter'  =>Static::_GetI($Info, 'Getter'  ),
        'Setter'  =>Static::_GetI($Info, 'Setter'  ),
        'Private' =>Static::_GetN($Info, 'Private' ),
        'Cache'   =>Static::_GetN($Info, 'Cache'   ),
      //'Info'    =>$Info,
      ];
      If($Info)
        $this->Log('Error', 'Therea are Unknown properties in the attribute ', $Id)->Debug($Info);
      $Item->Init($Args);
      Return True;
    }
    
    Function AddSetter($Setter)
    {
      If(!$Setter) Return False;
      $Refl=New ReflectionFunction($Setter);
      $Parameters=$Refl->GetParameters();

      $Attrs=$this->List;
      $Res=[];
      ForEach($Parameters As $Parameter)
      {
        $Name=$Parameter->GetName();
        If(Array_Key_Exists($Name, $Res)) 
          Return $this->Log('Error', 'Setter uses ', $Name, 'several times')->File($Refl)->Ret(False);
        
        $Attr=$Attrs[$Name]?? Null;
        If(!$Attr) 
          Return $this->Log('Error', 'Attribute ', $Name, ' not found in')->File($Refl)->Ret(False);
        
        If($Attr->CanHaveSetter())
          $Res[$Name]=$Attr;
      }
      If(!$Res)
         Return $this->Log('Error', 'Setter don\'t have setters')->File($Refl)->Ret(False);
      
      ForEach($Res As $Attr)
        $Attr->SetSetter($Setter);
      
    //$this->Log('Debug', 'TODO: Add Setter')->File($Refl);
      Return True;
    }
    
    Function GetArgsClosure($Setter)
    {
      Return $Res;
    }
    
    Function GetArgsAttrs(Array $Args, String $Exclude)
    {
      $Res=[];
      $Attrs=$this->List;
      ForEach($Args As $Name=>$v)
      {
        If($Name!==$Exclude)
          If($Item=$Attrs[$Name]?? Null)
            $Res[$Name]=$Item;
          Else
          {
            $this->Log('Error', 'Unknown agrument ', $Name, ' for ', $Exclude);
            $Res[$Name]=Null;
          }
      }
      Return $Res;
    }
    
    Function GetSet($List, $Args, $Vars)
    {
      If(Is_String($List))
      { //Warning?
        If(!Array_Key_Exists('Value', $Args))
          Return $this->GetSet([$List], [$List=>$Args], $Vars)[$List];
        $Value=$Args['Value']; UnSet($Args['Value']);
        Return $this->GetSet([$List=>$Value], [$List=>$Args], $Vars)[$List];
      }
      ForEach($List As $k=>$v) //Setters
        If(Is_String($k))
          $Vars[$k]=$v;
      $Res=[];
      If(!True)
        $this->_Linear($Res, $Vars, $List, $Args);
      Else
        $this->_Recursive($Res, $Vars, $List, $Args);
    # ForEach($List As $k=>$v)
    # {
    #   $Key=Is_String($k)? $k:$v;
    #   $Res[$Key]=$Vars[$Key];
    # }
      Return $Res;
    }
    
    Function _Recursive(&$Res, &$Vars, $List, $Args)
    {
      $Attrs=$this->List;
      ForEach($List As $k=>$v)
      {
        If(Is_String($k)) //Set
        {
          $Name=$k;
          $Item=$Attrs[$Name]?? Null;
          If(!$Item) { $this->Log('Error', 'Attribute ', $Name, ' is not exists'); $Vars[$Name]=Null; Continue; }
          $R=$Item->SetRecursive($Vars, $Args[$Name]?? [], $List);
          $Res[$Name]??=$R;
          Continue;
        }
        $Name=$v;
        If(Array_Key_Exists($Name, $Vars))
        { //Has already exists
          $R=$Vars[$Name];
        }
        Else
        {
          $Item=$Attrs[$Name]?? Null;
          If(!$Item) { $this->Log('Error', 'Attribute ', $Name, ' is not exists'); $Vars[$Name]=Null; Continue; }
          $R=$Item->GetRecursive($Vars, $Args[$Name]?? []);
          $Vars[$Name]=$R;
        }
        $Res[$Name]=$R;
      }
    }
    
    Function _Linear(&$Res, &$Vars, $List, $Args)
    { //TODO:
      $Attrs=$this->List;
      
      $Delayed=[];
      ForEach($List As $Name)
        If(!Array_Key_Exists($Name, $Vars))
        {
          $Item=$Attrs[$Name]?? Null;
          If(!$Item) { $this->Log('Error', 'Attribute ', $Name, ' is not exists'); $Vars[$Name]=Null; Continue; }
          $Delayed[$Name]=$Item;
        }
      
      While($Delayed)
      {
        $List=$Delayed;
        $Delayed=[];
        ForEach($List As $Name)
          If(!Array_Key_Exists($Name, $Vars))
          {
            $Item=$this->List[$Name]?? Null;
            If(!$Item) { $this->Log('Error', 'Attribute ', $Name, ' is not exists'); $Vars[$Name]=Null; Continue; }
            $Delayed[$Name]=$Item;
          }
      }
    }
    
    Function Deps_Invalidate()
    {
      ForEach($this->List As $Item)
        $Item->Deps_Invalidate();
    }
  }
?>