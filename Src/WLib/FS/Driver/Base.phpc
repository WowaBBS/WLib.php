<?
  $Loader->Parent_Class('/Object');
  $Loader->Load_Lib('/FS/Utils'); //FileMask2RegExp
  $Loader->Load_Type('/FS/Driver/Node');
  $Loader->Load_Type('/Inet/Url');
  
# $Loader->Load_Type('/FS/Attr/Date/UnixTime' ); Use T_FS_Attr_Date_UnixTime As FileTime ;
# $Loader->Load_Type('/FS/Attr/Mode'          ); Use T_FS_Attr_Mode          As Mode     ;
  $Loader->Load_Type('/FS/Attr/Hash'          ); Use T_FS_Attr_Hash          As Hash     ;
# $Loader->Load_Type('/FS/Attr/IntId'         ); Use T_FS_Attr_IntId         As IntId    ;
  $Loader->Load_Type('/FS/Driver/Attr'        ); Use T_FS_Driver_Attr        As Attr     ;

  Class C_FS_Driver_Base Extends C_Object
    Implements ArrayAccess
  {
    Var $Attr;
  
    Function _Init($Args)
    {
      $this->Attr=$this->Create_Object('/FS/Attr/Manager');
      Parent::_Init($Args);
      $this->Attr_Init($this->Attr);
    }
    
    Function Load($Path, $Args=[])
    {
      $Offset =$Args['Offset' ]?? 0     ;
      $Length =$Args['Length' ]?? Null  ;
      $Lock   =$Args['Lock'   ]?? True  ;
      $Text   =$Args['Text'   ]?? False ;
        
      $Flags=['ReadOnly',
        ($Lock ?'Shareable' :'None'   ),
        ($Text ?'Text'      :'Binary' ),
      ];
        
      $f=$this->Stream($Path, $Flags);
      If(!$f)
        Return False;
      If($Offset) $f->Seek($Offset);
      $Res=$Length===Null? $f->ReadAll():$f->Read($Length);
      $f->Close();
      Return $Res;
    }
 
    Function Save($Path, $Data, $Args=[])
    {
      $Append =$Args['Append' ]?? False;
      $Lock   =$Args['Lock'   ]?? False;
      $Text   =$Args['Text'   ]?? False;
        
      $Flags=['WriteOnly', 'Create', 
        ($Append ?'AppEnd'    :'Clear'  ),
        ($Lock   ?'Exclusive' :'None'   ),
        ($Text   ?'Text'      :'Binary' ),
      ];
        
      $f=$this->Stream($Flags);
      If(!$f)
        Return False;
      $f->Write($Data);
      $f->Close();
    }
 
    Function Include($Include_Path, $UnPack_Vars=[], $Pack_Vars=[]) { $this->Call($Path, 'Include', ['UnPack_Vars'=>$UnPack_Vars, 'Pack_Vars'=>$Pack_Vars]); }
  //Function Include($Include_Path, $UnPack_Vars=[], $Pack_Vars=[]) { Return $this->Content_Include($this->Load($Include_Path), ['UnPack_Vars'=>$UnPack_Vars, 'Pack_Vars'=>$Pack_Vars]); }
  //Function Include($Include_Path, $UnPack_Vars=[], $Pack_Vars=[]) { Return $this->Real_Include($this->SysPath($Include_Path), ['UnPack_Vars'=>$UnPack_Vars, 'Pack_Vars'=>$Pack_Vars]); }
 
    Function _Content_Include($Content, $Args=[])
    {
      $UnPack_Vars =$Args['UnPack_Vars' ]?? [];
      $Pack_Vars   =$Args['Pack_Vars'   ]?? [];
      Extract($UnPack_Vars);
      $Res=Eval('?>'.$Content); //.'<?'
      ForEach($Pack_Vars As $Pack_Var)
        $UnPack_Vars[$Pack_Var]=${$Pack_Var};
      Return $Res;
    }
 
    Function _Real_Include($SysPath, $Args=[])
    {
      $UnPack_Vars =$Args['UnPack_Vars' ]?? [];
      $Pack_Vars   =$Args['Pack_Vars'   ]?? [];
      Extract($UnPack_Vars);
      $Res=Include $SysPath;
      ForEach($Pack_Vars As $Pack_Var)
        $UnPack_Vars[$Pack_Var]=${$Pack_Var};
      Return $Res;
    }
 
    Function URL($Path) { Return New T_Inet_Url(); }
    Function Vars($Path) { Return []; }
 
    Function Node($Path=False)
    {
      Return New T_FS_Driver_Node($this, $Path);
    }
    
    Function _Copy($From, $To, $Args)
    {
      //TODO:
    # If($From ==$To) Return True;
    # If($From =='' ) Return True;
    # If($To   =='' ) Return True;
    
      If($Args['Debug']?? False)
        $this->Log('Debug', 'Copy ', $From->Path->ToString(), ' -> ', $To->Path->ToString());
      
      $Res=False;
      If($From->Is_Link())
      {
      //If Skip Link;
        Return True;
      }
      
      If($From->Is_File())
      {
        $StreamFrom =$From ->Stream(['Read'  ]);
        $StreamTo   =$To   ->Stream(['Write' ,'Create', 'MakePath'=>False]);
        
        $Res=$StreamFrom->Copy_To_Stream($StreamTo);
        
        $StreamFrom ->Close(); $StreamFrom =Null;
        $StreamTo   ->Close(); $StreamTo   =Null;
      }
      ElseIf($From->Is_Dir())
      {
        $To->MkDir();
        
        $Res=True;
        ForEach($From As $Name=>$FromNode)
          If(!$FromNode->CopyTo($To->Sub($Name), $Args))
            $Res=False;
      }
      Else
        $this->Log('Error', 'TODO: Unknown Node Type ', $From['Type']);

      If(!$Res)
        Return False;
      
      If($Args['CopyAttributes']?? True)
        $To->GetSet($From->GetSet($To['Attributes']));
        
      If($Args['Remove']?? False)
        Return $From->Remove(False);
    }
    
    Function _Remove($Node, $Args)
    {
      If($Node->Is_File())
        Return $Node->UnLink();
      If(!$Node->Is_Dir()) Return False;
    //TODO: If(!$this->Is_Link())
      If(!($Args['Recursive']?? Null))
        Return $Node->RmDir();
      $Res=True;
      ForEach($Node As $SubNode)
        If(!$SubNode->Remove($Args))
          $Res=False;
      Return $Res && $Node->RmDir();
    }
    
  //****************************************************************
  // Cache
  
    Function _ClearCache($Path, $Args)
    {
      $Res=[];
      Return $Res;
    }
    
  //****************************************************************
    Function Attr_Init($Attr)
    {
      Attr::Init_System  ($Attr);
      Attr::Init_Path    ($Attr);
      Attr::Init_Stat    ($Attr);
      Attr::Init_Test    ($Attr);
      $this->Attr_Init_Content ($Attr);

      $Attr->Register([
        'Remove' =>fn($Driver, $Node, $Args)=>$Driver->_Remove($Node, $Args),
        'Copy'   =>fn($Driver, $Node, $Args)=>$Driver->_Copy($Node, $Args['To'], $Args),
        'ClearCache' =>fn($Driver, $Path, $Args)=>$Driver->_ClearCache ($Path, $Args),
        'Attributes' =>fn()=>[],
      ]);
    }
    
    Function Attr_Init_Content($Attr)
    {
      $Attr->Register([
      //'Content'    =>[fn($Driver, $Path, $Args)=>$Driver->_Load($Path, $Args), fn($Driver, $Content, $SysPath, $Args)=>$Driver->_Save($Path, $Content, $Args) ,'Cache'=>True],

        'Md5'  => fn($Content)=>Hash::FromBinary($Content, 'Md5'  ),
        'Sha1' => fn($Content)=>Hash::FromBinary($Content, 'Sha1' ),
      # 'Hash' => fn($Content, $Args)=>Hash::FromBinary($Content, $Args['Hash']), //TODO: Describe Args Hash
      ]);
    }
    
    Function GetSet(String $Path ,Array $Key ,$Args=[], $Vars=[]) { Return $this->Attr->GetSet($Key ,$Args, $Vars+['Driver'=>$this, 'Path'=>$Path, 'Args'=>[]]); }
    
  //****************************************************************
  // ArrayAccess interface

    Public Function OffsetExists ($k    ):Bool  { return True;     }
    Public Function OffsetGet    ($k    ):Mixed { return $this->Node($k); }
    Public Function OffsetSet    ($k ,$v):Void  { $this->Log('Fatal', 'Unsupported'); }
    Public Function OffsetUnset  ($k    ):Void  { $this->Log('Fatal', 'Unsupported'); }
    
  //****************************************************************
  }
?>