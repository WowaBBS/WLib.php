<?
  $Loader->Parent_Class('/FS/Driver/Base');
  $Loader->Load_Type('/FS/Path'  );
  $Loader->Load_Type('/Inet/Url' );
  $Loader->Load_Type('/FS/Attr/Hash');
  $Loader->Load_Type('/FS/Attr/Date/UnixTime' );
  $Loader->Load_Type('/FS/Driver/Attr' );
  
  Use T_FS_Attr_Date_UnixTime As FileTime ;
  Use T_FS_Attr_Mode          As Mode     ;
  Use T_FS_Attr_Hash          As Hash     ;
  Use T_FS_Attr_IntId         As IntId    ;
  Use T_FS_Driver_Attr        As Attr     ;

  Class C_FS_Driver_System Extends C_FS_Driver_Base
  {
    Var $BasePath = False;
    Var $BaseURL  = False;
    Var $Context  = Null;
 
    Function _Init($Args)
    {
      parent::_Init($Args);
      $this->BasePath = T_FS_Path  ::Create($Args['Path' ]?? '');
      $this->BaseURL  = T_Inet_Url ::Create($Args['Url'  ]?? '');
    }
 
    Function _Load($Path, $Args=[])
    {
      $Offset =$Args['Offset' ]?? 0     ;
      $Length =$Args['Length' ]?? Null  ;
    # $Lock   =$Args['Lock'   ]?? True  ;
    # $Text   =$Args['Text'   ]?? False ;
        
      Return File_Get_Contents($Path, False, $this->Context, $Offset, $Length);
    }
 
    Function _Save($Path, $Data, $Args=[])
    {
      $Append =$Args['Append' ]?? False;
      $Lock   =$Args['Lock'   ]?? False;
    # $Text   =$Args['Text'   ]?? False;
        
      $Flags=($Append? FILE_APPEND:0)|($Lock? LOCK_EX:0);
        
      Return File_Put_Contents($Path, $Data, $Flags, $this->Context);
    }
    
    Function Save($Path, $Data, $Args=[]) { Return $this->_Save($this->RealPath($Path), $Data, $Args); }
    Function Load($Path,        $Args=[]) { Return $this->_Load($this->RealPath($Path),        $Args); }
 
    Function RealPath($Path)
    {
      Return $this->BasePath->_Clone()->Add(Is_Object($Path)? $Path->Make():$Path)->Make();
    }
 
    Function IsFile ($Path) { Return Is_File ($this->RealPath($Path)); }
    Function IsDir  ($Path) { Return Is_Dir  ($this->RealPath($Path)); }
 
    Function Exists($Path)
    {
      $P=$this->RealPath($Path);
      Return Is_Dir($P)||Is_File($P);
    }
 
    Function Stream($Path, $Mode)
    {
      $P=$this->RealPath($Path);
      $Res=$this->Create_Object('Stream/File');
      $Res->Assign($P);
      $Res->Open($Mode);
      Return $Res;
    }
 
    Function Files($Path, $Mask=False, $Attr=3)
    {
      $Res=[];
      $P=$this->RealPath($Path);
      If(!Is_Dir($P))
        Return $Res;
      Return ListDir($P, $Mask, $Attr);
    }
 
    Function Nodes($Path)
    {
      If(!$this->IsFile($Path))
        Return [];
      $Res=[];
      $Res[]=$this->Node($Path);
      Return $Res;
    }
 
    Function URL($Path)
    {
      Return $this->BaseURL->Node($Path);
    }
    
  //****************************************************************
  
    Function _GetUserById  ($Id) { Return Function_Exists('Posix_GetPwUId')? (Posix_GetPwUId($Id)?:[])['name']?? 'Unknown'.$Id: ($Id? '':'User'  .$Id); } 
    Function _GetGroupById ($Id) { Return Function_Exists('Posix_GetGrGId')? (Posix_GetGrGId($Id)?:[])['name']?? 'Unknown'.$Id: ($Id? '':'Group' .$Id); } 
  
  //****************************************************************
  // Attributes
  
    Static Function MyStat($RealPath)
    {
      $Stat=@LStat($RealPath);
      If(!$Stat)
        Return [];
      $Type=Mode::_GetType($Stat['mode']);
      $IsLink=$Type==='Link';
      if($IsLink)
      { //TODO: Totally switch byt config
        $Stat2 =@Stat($RealPath);
        $Stat['mode']=$Stat2['mode'];
      }
      $Stat['IsLink']=$IsLink;
        
      Return $Stat;
    }    
    
    Function Attr_Init($Attr)
    {
      Parent::Attr_Init($Attr);
      $Attr->Register([
        'RealPath'   =>[fn($Driver, $Path)=>$Driver->RealPath($Path) ,'Private'=>True],
        'Context'    =>[fn($Driver       )=>$Driver->Context         ,'Private'=>True],
        'Content'    =>[fn($Driver, $RealPath, $Args)=>$Driver->_Load($RealPath, $Args), fn($Driver, $Content, $RealPath, $Args)=>$Driver->_Save($RealPath, $Content, $Args) ,'Cache'=>False],
        'Stat'       => Static::MyStat(...),//fn($RealPath)=>Static::MyStat($RealPath),

        'Md5'        =>[fn($RealPath)=>New Hash(Md5_File  ($RealPath, True), 'Md5'  ), 'Cache'=>'File'],
        'Sha1'       =>[fn($RealPath)=>New Hash(Sha1_File ($RealPath, True), 'Sha1' ), 'Cache'=>'File'],
        
        'SymLink'  =>[fn($RealPath)=>ReadLink($RealPath), fn($RealPath, $SymLink )=>SymLink($SymLink  ,$RealPath)], //Bug checking $SymLink is exists in window
        'HardLink' =>[Null                              , fn($RealPath, $HardLink)=>   Link($HardLink ,$RealPath)],
        
        'MkDir'  =>fn($Context, $RealPath, $Args)=>MkDir  ($RealPath, $Args['Mode']?? 0777, $Args['Recursive']?? True, $Context),
        'UnLink' =>fn($Context, $RealPath       )=>UnLink ($RealPath, $Context),
        'RmDir'  =>fn($Context, $RealPath       )=>RmDir  ($RealPath, $Context),
      ]);
      
      If(False)
        Attr::Init_StatAlt($Attr);
      Attr::Init_Disk($Attr);
      $this->Attr_Init_StatSet($Attr);
    }
    
    Function Attr_Init_StatSet($Attr)
    {
      $Attr->Register([
        'UserName'  =>fn($Driver, $UserId  )=>$Driver->_GetUserById  ($UserId  ),
        'GroupName' =>fn($Driver, $GroupId )=>$Driver->_GetGroupById ($GroupId ),
        
        fn($RealPath, $Mode)=>ChMod($RealPath, $Mode->ToInt()),
        fn($RealPath, $IsLink, $UserId    )=>$IsLink? LChGrp($RealPath, $GroupId   ):ChOwn($RealPath, $UserId    ),
        fn($RealPath, $IsLink, $UserName  )=>$IsLink? LChGrp($RealPath, $GroupName ):ChOwn($RealPath, $UserName  ),
        fn($RealPath, $IsLink, $GroupId   )=>$IsLink? LChOwn($RealPath, $UserId    ):ChGrp($RealPath, $GroupId   ),
        fn($RealPath, $IsLink, $GroupName )=>$IsLink? LChOwn($RealPath, $UserName  ):ChGrp($RealPath, $GroupName ),
        fn($RealPath, $Modified, $LastAccess)=>Touch($RealPath, $Modified, $LastAccess),
      ]);
    }
  //****************************************************************
  }
?>