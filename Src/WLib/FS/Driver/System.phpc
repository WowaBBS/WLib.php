<?
  $Loader->Parent_Class('/FS/Driver/Base');
  $Loader->Load_Type('/FS/Path'  );
  $Loader->Load_Type('/Inet/Url' );
  $Loader->Load_Type('/FS/Attr/Hash');
  $Loader->Load_Type('/FS/Attr/Date/UnixTime' );
  
  Use T_FS_Attr_Date_UnixTime As FileTime ;
  Use T_FS_Attr_Mode          As Mode     ;
  Use T_FS_Attr_Hash          As Hash     ;
  Use T_FS_Attr_IntId         As IntId    ;

  Class C_FS_Driver_System Extends C_FS_Driver_Base
  {
    Var $BasePath = False;
    Var $BaseURL  = False;
    Var $Context  = Null;
 
    Function _Init($Args)
    {
      parent::_Init($Args);
      $this->BasePath = T_FS_Path  ::Create();
      $this->BaseURL  = T_Inet_Url ::Create();
    }
 
    Function _Load($Path, $Args=[])
    {
      $Offset =$Args['Offset' ]?? 0     ;
      $Length =$Args['Length' ]?? Null  ;
    # $Lock   =$Args['Lock'   ]?? True  ;
    # $Text   =$Args['Text'   ]?? False ;
        
      Return File_Get_Contents($Path, False, $this->Context, $Offset, $Length);
    }
 
    Function _Save($Path, $Data, $Args=[])
    {
      $Append =$Args['Append' ]?? False;
      $Lock   =$Args['Lock'   ]?? False;
    # $Text   =$Args['Text'   ]?? False;
        
      $Flags=($Append? FILE_APPEND:0)|($Lock? LOCK_EX:0);
        
      Return File_Put_Contents($Path, $Data, $Flags, $this->Context);
    }
    
    Function Save($Path, $Data, $Args=[]) { Return $this->_Save($this->RealPath($Path), $Data, $Args); }
    Function Load($Path,        $Args=[]) { Return $this->_Load($this->RealPath($Path),        $Args); }
 
    Function RealPath($Path)
    {
      Return $this->BasePath->_Clone()->Add(Is_Object($Path)? $Path->Make():$Path)->Make();
    }
 
    Function IsFile ($Path) { Return Is_File ($this->RealPath($Path)); }
    Function IsDir  ($Path) { Return Is_Dir  ($this->RealPath($Path)); }
 
    Function Exists($Path)
    {
      $P=$this->RealPath($Path);
      Return Is_Dir($P)||Is_File($P);
    }
 
    Function Stream($Path, $Mode)
    {
      $P=$this->RealPath($Path);
      $Res=$this->Create_Object('Stream/File');
      $Res->Assign($P);
      $Res->Open($Mode);
      Return $Res;
    }
 
    Function Files($Path, $Mask=False, $Attr=3)
    {
      $Res=[];
      $P=$this->RealPath($Path);
      If(!Is_Dir($P))
        Return $Res;
      Return ListDir($P, $Mask, $Attr);
    }
 
    Function Nodes($Path)
    {
      If(!$this->IsFile($Path))
        Return [];
      $Res=[];
      $Res[]=$this->Node($Path);
      Return $Res;
    }
 
    Function Include($Include_Path, $UnPack_Vars=[], $Pack_Vars=[])
    {
      Extract($UnPack_Vars);
      $Res=Include $this->RealPath($Include_Path);
      ForEach($Pack_Vars As $Pack_Var)
        $UnPack_Vars[$Pack_Var]=${$Pack_Var};
      Return $Res;
    }
 
    Function URL($Path)
    {
      Return $this->BaseURL->Node($Path);
    }
    
  //****************************************************************
  // Attributes
  
    // Node:
    //  IsDir       Boolean
    //  IsFile      Boolean
    //  IsLink      Boolean
    //  Type        EnumString [File, Directory, Link, Socket, ... Fifo, Char, Block]
    //  Writeble    Boolean
    //  Readable    Boolean
    //# Executable  Boolean //?
    //  Exists      Boolean
    //  Created     FileDate
    //  Modified    FileDate
    //  LastAccess  FileDate
    //SymLink:
    //  Link        String
    //File:
    //  Size        Integer
    //  Content     String <|Stream
    //  Stream      Stream
    //  Md5         String
    //Optional:
    //  Stat
    //  LinkStat
    //
    //Device:
    //  DeviceId
    //  FreeSpace
    //  TotalSpace
    
    Function Attr_Init($Attr)
    {
      Parent::Attr_Init($Attr);
      $Attr->Register([
        'RealPath'   =>[fn($Driver, $Path)=>$Driver->RealPath($Path) ,'Private'=>True],
        'Context'    =>[fn($Driver       )=>$Driver->Context         ,'Private'=>True],
        'Content'    =>[fn($Driver, $RealPath, $Args)=>$Driver->_Load($RealPath, $Args), fn($Driver, $Content, $RealPath, $Args)=>$Driver->_Save($RealPath, $Content, $Args) ,'Cache'=>True],
        'Stat'       => fn($RealPath)=>@Stat      ($RealPath),
        'LinkStat'   => fn($RealPath)=>@LStat     ($RealPath),

        'Executable' => fn($RealPath)=>Is_Executable ($RealPath),
        'Readable'   => fn($RealPath)=>Is_Readable   ($RealPath),
        'Writable'   => fn($RealPath)=>Is_Writable   ($RealPath),
        
        'IsDir'      => fn($RealPath)=>Is_Dir     ($RealPath),
        'IsFile'     => fn($RealPath)=>Is_File    ($RealPath),
        'IsLink'     => fn($RealPath)=>Is_Link    ($RealPath),
        'Exists'     => fn($RealPath)=>FileExists ($RealPath),

        'Md5'        =>[fn($RealPath)=>New Hash(Md5_File  ($RealPath, True), 'Md5'  ), 'Cache'=>'File'],
        'Sha1'       =>[fn($RealPath)=>New Hash(Sha1_File ($RealPath, True), 'Sha1' ), 'Cache'=>'File'],
        
        'Type'       => fn($RealPath)=>             FileType  ($RealPath) ,
        'DeviceId'   => fn($Stat    )=>New IntId   ($Stat['dev'     ]), // 0
        'NodeId'     => fn($RealPath)=>New IntId   (FileINode ($RealPath)), // 1
        'Mode'       =>[fn($RealPath)=>New Mode    (FilePerms ($RealPath)), fn($RealPath, $Mode    )=>ChMod($RealPath, $Mode->ToInt()), ],
        'NumLinks'   => fn($Stat    )=>             $Stat['nlink'   ]     , // 3
        'UserId'     =>[fn($RealPath)=>             FileOwner ($RealPath) , fn($RealPath, $UserId  )=>ChOwn($RealPath, $UserId  ), ],
        'GroupId'    =>[fn($RealPath)=>             FileGroup ($RealPath) , fn($RealPath, $GroupId )=>ChGrp($RealPath, $GroupId ), ],
        'DeviceType' => fn($Stat    )=>             $Stat['rdev'    ]     , // 6
        'Size'       => fn($RealPath)=>             FileSize  ($RealPath) ,
        'LastAccess' => fn($RealPath)=>New FileTime(FileATime ($RealPath)),
        'Modified'   => fn($RealPath)=>New FileTime(FileMTime ($RealPath)),
        'Created'    => fn($RealPath)=>New FileTime(FileCTime ($RealPath)),
        'BlockSize'  => fn($Stat    )=>             $Stat['blksize' ] , //11
        'Blocks'     => fn($Stat    )=>             $Stat['blocks'  ] , //12
        
        fn($RealPath, $Modified, $LastAccess)=>Touch($RealPath, $Modified, $LastAccess),
        
        'UserName'  =>[fn($UserId  )=>(Posix_GetPwUId($UserId  )?:[])['name']?? '' ,fn($RealPath, $UserName  )=>ChOwn($RealPath, $UserName  )],
        'GroupName' =>[fn($GroupId )=>(Posix_GetGrGId($GroupId )?:[])['name']?? '' ,fn($RealPath, $GroupName )=>ChGrp($RealPath, $GroupName )],
        
        'LinkUserName'  =>[fn($LinkUserId  )=>(Posix_GetPwUId($LinkUserId  )?:[])['name']?? '' ,fn($RealPath, $LinkUserName  )=>ChOwn($RealPath, $LinkUserName  )],
        'LinkGroupName' =>[fn($LinkGroupId )=>(Posix_GetGrGId($LinkGroupId )?:[])['name']?? '' ,fn($RealPath, $LinkGroupName )=>ChGrp($RealPath, $LinkGroupName )],
        
        'DiskTotal' => fn($RealPath)=>Disk_Total_Space ($RealPath),
        'DiskFree'  => fn($RealPath)=>Disk_Free_Space  ($RealPath),
        'DiskUsed'  => fn($DiskTotal, $DiskFree)=>$DiskTotal? $DiskTotal-$DiskFree:$DiskTotal,
        
        'SymLink'  =>[fn($RealPath)=>ReadLink($RealPath), fn($RealPath, $SymLink )=>SymLink($RealPath, $SymLink )],
        'HardLink' =>[Null                              , fn($RealPath, $HardLink)=>   Link($RealPath, $HardLink)],
        
        fn($RealPath, $LinkGroupId   )=>LChGrp($RealPath, $LinkGroupId   ),
        fn($RealPath, $LinkGroupName )=>LChGrp($RealPath, $LinkGroupName ),
        fn($RealPath, $LinkUserId    )=>LChOwn($RealPath, $LinkUserId    ),
        fn($RealPath, $LinkUserName  )=>LChOwn($RealPath, $LinkUserName  ),
      ]);
    }
    
  //****************************************************************
  }
?>