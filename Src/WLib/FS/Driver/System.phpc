<?
  $Loader->Parent_Class('/FS/Driver/Base');
  $Loader->Load_Type('/FS/Path'  );
  $Loader->Load_Type('/Inet/Url' );

# $Loader->Load_Type('/FS/Attr/Date/UnixTime' ); Use T_FS_Attr_Date_UnixTime As FileTime ;
  $Loader->Load_Type('/FS/Attr/Mode'          ); Use T_FS_Attr_Mode          As Mode     ;
  $Loader->Load_Type('/FS/Attr/Hash'          ); Use T_FS_Attr_Hash          As Hash     ;
# $Loader->Load_Type('/FS/Attr/IntId'         ); Use T_FS_Attr_IntId         As IntId    ;
  $Loader->Load_Type('/FS/Driver/Attr'        ); Use T_FS_Driver_Attr        As Attr     ;

  Class C_FS_Driver_System Extends C_FS_Driver_Base
  {
    Var $BasePath = False;
    Var $BaseUrl  = False;
    Var $Context  = Null;
 
    Function _Init($Args)
    {
      parent::_Init($Args);
      $this->BasePath = T_FS_Path  ::Create($Args['Path' ]?? '');
      $this->BaseUrl  = T_Inet_Url ::Create($Args['Url'  ]?? '');
    }
 
    Function _Load($Path, $Args=[])
    {
      $Offset =$Args['Offset' ]?? 0     ;
      $Length =$Args['Length' ]?? Null  ;
    # $Lock   =$Args['Lock'   ]?? True  ;
    # $Text   =$Args['Text'   ]?? False ;
        
      Return File_Get_Contents($Path, False, $this->Context, $Offset, $Length);
    }
 
    Function _Save($Path, $Data, $Args=[])
    {
      $Append =$Args['Append' ]?? False;
      $Lock   =$Args['Lock'   ]?? False;
    # $Text   =$Args['Text'   ]?? False;
        
      $Flags=($Append? FILE_APPEND:0)|($Lock? LOCK_EX:0);
        
      Return File_Put_Contents($Path, $Data, $Flags, $this->Context);
    }
    
    Function _SysPath($Path)
    {
      Return $this->BasePath->_Clone()->Add(Is_Object($Path)? $Path->Make():$Path)->Make();
    }
    
    Function _Stream($SysPath, Array $Args=[])
    {
      $Res=$this->Create_Object('/Stream/File');
      $Res->Assign($SysPath);

      If($Flags=$Args['Mode']?? 0)
        $Res->Open($Flags);
      
      Return $Res;
    }
 
    Function _Files($SysPath, Array $Args=[])
    { //TODO: Remove
      $Mask=$Args['Mask']?? False ;
      $Attr=$Args['Attr']?? 3     ;
    
      If(!Is_Dir($SysPath))
        Return [];
      Return ListDir($SysPath, $Mask, $Attr);
    }
 
    Function _Nodes($SysPath)
    {
    # If(!Is_File($RealPat))
        Return [];
    # $Res=[];
    # $Res[]=$this->Node($SysPath);
    # Return $Res;
    }
 
    Function Url($Path) { Return $this->BaseUrl->Node($Path); }
    
    Function _ClearCache($Path, $Args=[])
    {
      $Res=Parent::_ClearCache($Path);
      If($SysPath=$Args['SysPath']?? False)
        $Res['SysPath']=ClearStatCache(True, $SysPath);
      Return $Res;
    }
    
  //****************************************************************
    Function _List($SysPath, $Args, $Path)
    {
      $Mask   =$Args['Mask'   ]?? False;
      $RegExp =$Args['RegExp' ]?? Static::MaskToRegex($Mask);
      $Attr   =$Args['Attr'   ]?? 3;
      $File   =$Args['File'   ]?? ($Attr&1)? ['Stat']:[];
      $Dir    =$Args['Dir'    ]?? ($Attr&2)? ['Stat']:[];
      
      $Filter=$RegExp ? fn($File)=>Preg_Match ($RegExp ,$File):Null;
    //$Filter=$Mask   ? fn($File)=>FnMatch    ($Mask   ,$File, $MaskFlag):Null;
      
      If(!Is_Dir($SysPath))
        Return;
      $Handle=@OpenDir($SysPath);
      If(!$Handle)
        Return;
        
      If(StrLen($Path)) $Path.='/';

      While(False!==($File=ReadDir($Handle)))
      {
        If($File=='.'  ) Continue;
        If($File=='..' ) Continue;
        $ItemPath=$Path.$File;
        If(Is_File ($ItemPath) && !$File ) Continue;
        If(Is_Dir  ($ItemPath) && !$Dir  ) Continue;
        If($Filter && !$Filter($File)) Continue;
        Yield $File=>$this->Node($ItemPath);
      }
      CloseDir($Handle);
    }
  //****************************************************************
  // User&Group
  
    Function _GetUserById  ($Id) { Return Function_Exists('Posix_GetPwUId')? (Posix_GetPwUId($Id)?:[])['name']?? 'Unknown'.$Id: ($Id? '':'User'  .$Id); } 
    Function _GetGroupById ($Id) { Return Function_Exists('Posix_GetGrGId')? (Posix_GetGrGId($Id)?:[])['name']?? 'Unknown'.$Id: ($Id? '':'Group' .$Id); } 
  
  //****************************************************************
  // Attributes
  
    Static Function MyStat($SysPath)
    {
      $Stat=@LStat($SysPath);
      If(!$Stat)
        Return [
         'dev'     =>    0, // 0  'Device_Id'
         'ino'     =>    0, // 1  'Node_Id'
         'mode'    =>    0, // 2  'Mode'
         'nlink'   =>    0, // 3  'NumLinks'
         'uid'     =>    0, // 4  'User_Id'
         'gid'     =>    0, // 5  'Group_Id'
         'rdev'    =>    0, // 6  'Device_Type'
         'size'    =>    0, // 7  'Size'
         'atime'   => Null, // 8  'LastAccess'
         'mtime'   => Null, // 9  'Modified'
         'ctime'   => Null, //10  'Created'
         'blksize' =>    0, //11  'Block_Size'
         'blocks'  =>    0, //12  'Block_Count'
        ];
      $Type=Mode::_GetType($Stat['mode']);
      $Is_Link=$Type==='Link';
      if($Is_Link)
      { //TODO: Totally switch by config
        $Stat2 =@Stat($SysPath);
        $Stat['mode']=$Stat2['mode'];
      }
      $Stat['Is_Link']=$Is_Link;
      
      Return $Stat;
    }
    
    Function Attr_Init($Attr)
    {
      Parent::Attr_Init($Attr);
      $Attr->Register([
        'SysPath'    =>[fn($Driver, $Path)=>$Driver->_SysPath($Path) ,'Private'=>True],
        'Context'    =>[fn($Driver       )=>$Driver->Context         ,'Private'=>True],
        'Content'    =>[fn($Driver, $SysPath, $Args)=>$Driver->_Load   ($SysPath, $Args), fn($Driver, $Content, $SysPath, $Args)=>$Driver->_Save($SysPath, $Content, $Args) ,'Cache'=>False],
        'Stream'     => fn($Driver, $SysPath, $Args)=>$Driver->_Stream ($SysPath, $Args),
        'Files'      => fn($Driver, $SysPath, $Args)=>$Driver->_Files  ($SysPath, $Args), //<TODO: Remove
        'Stat'       => Static::MyStat(...),//fn($SysPath)=>Static::MyStat($SysPath),

        'Md5'        =>[fn($SysPath)=>Is_File($SysPath)? Hash::FromFile($SysPath, 'Md5'  ):Null, 'Cache'=>'File'],
        'Sha1'       =>[fn($SysPath)=>Is_File($SysPath)? Hash::FromFile($SysPath, 'Sha1' ):Null, 'Cache'=>'File'],
        
        'SymLink'    =>[fn($SysPath)=>ReadLink($SysPath), fn($SysPath, $SymLink )=>SymLink($SymLink  ,$SysPath)], //Bug checking $SymLink is exists in window
        'HardLink'   =>[Null                            , fn($SysPath, $HardLink)=>   Link($HardLink ,$SysPath)],
        
        'MkDir'      =>fn($Context, $SysPath, $Args)=>@MkDir  ($SysPath, $Args['Mode']?? 0777, $Args['Recursive']?? True, $Context),
        'UnLink'     =>fn($Context, $SysPath       )=>@UnLink ($SysPath, $Context),
        'RmDir'      =>fn($Context, $SysPath       )=>@RmDir  ($SysPath, $Context),
        'ClearCache' =>fn($Driver, $SysPath, $Args, $Path)=>$Driver->_ClearCache($Path, $Args+['SysPath'=>$SysPath]),
        'List'       =>fn($Driver, $SysPath, $Args, $Path)=>$Driver->_List($SysPath, $Args, $Path),
      ]);
      
      If(False)
        Attr::Init_StatAlt($Attr);
      Attr::Init_Disk($Attr);
      $this->Attr_Init_StatSet($Attr);
    }
    
    Function Attr_Init_StatSet($Attr)
    {
      $Attr->Register([
        'User_Name'  =>fn($Driver, $User_Id  )=>$Driver->_GetUserById  ($User_Id  ),
        'Group_Name' =>fn($Driver, $Group_Id )=>$Driver->_GetGroupById ($Group_Id ),
        
        fn($SysPath, $Mode)=>ChMod($SysPath, $Mode->ToInt()),
        fn($SysPath, $Is_Link, $User_Id    )=>$Is_Link? LChGrp($SysPath, $Group_Id   ):ChOwn($SysPath, $User_Id    ),
        fn($SysPath, $Is_Link, $User_Name  )=>$Is_Link? LChGrp($SysPath, $Group_Name ):ChOwn($SysPath, $User_Name  ),
        fn($SysPath, $Is_Link, $Group_Id   )=>$Is_Link? LChOwn($SysPath, $User_Id    ):ChGrp($SysPath, $Group_Id   ),
        fn($SysPath, $Is_Link, $Group_Name )=>$Is_Link? LChOwn($SysPath, $User_Name  ):ChGrp($SysPath, $Group_Name ),
        fn($SysPath, $Modified, $LastAccess)=>Touch($SysPath, $Modified, $LastAccess),
      ]);
    }
  //****************************************************************
  }
?>