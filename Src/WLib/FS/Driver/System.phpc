<?
  $Loader->Parent_Class('/FS/Driver/Base');
  $Loader->Load_Type('/FS/Path'  );
  $Loader->Load_Type('/Inet/Url' );

  Class C_FS_Driver_System Extends C_FS_Driver_Base
  {
    Var $BasePath = False;
    Var $BaseURL  = False;
    Var $Context  = Null;
 
    Function _Init($Args)
    {
      parent::_Init($Args);
      $this->BasePath = T_FS_Path  ::Create();
      $this->BaseURL  = T_Inet_Url ::Create();
    }
 
    Function Load($Path, $Args=[])
    {
      $Offset =$Args['Offset' ]?? 0     ;
      $Length =$Args['Length' ]?? Null  ;
    # $Lock   =$Args['Lock'   ]?? True  ;
    # $Text   =$Args['Text'   ]?? False ;
        
      $P=$this->RealPathStr($Path->Make());
      Return File_Get_Contents($P, False, $this->Context, $Offset, $Length);
    }
 
    Function Save($Path, $Data, $Args=[])
    {
      $Append =$Args['Append' ]?? False;
      $Lock   =$Args['Lock'   ]?? False;
    # $Text   =$Args['Text'   ]?? False;
        
      $Flags=($Append? FILE_APPEND:0)|($Lock? LOCK_EX:0);
        
      $P=$this->RealPathStr($Path->Make());
      Return File_Put_Contents($P, $Data, $Flags, $this->Context);
    }
    
    Function RealPathStr($Path)
    {
      $P=$this->BasePath->_Clone();
      $P->Add($Path);
      Return $P->Make();
    }
 
    Function IsFile($Path)
    {
      $P=$this->RealPathStr($Path->Make());
      Return Is_File($P);
    }
 
    Function IsDir($Path)
    {
      $P=$this->RealPathStr($Path->Make());
      Return Is_Dir($P);
    }
 
    Function Exists($Path)
    {
      $P=$this->RealPathStr($Path->Make());
      Return Is_Dir($P)||Is_File($P);
    }
 
    Function Stream($Path, $Mode)
    {
      $P=$this->RealPathStr($Path->Make());
      $Res=$this->Create_Object('Stream/File');
      $Res->Assign($P);
      $Res->Open($Mode);
      Return $Res;
    }
 
    Function Files($Path, $Mask=False, $Attr=3)
    {
      $Res=[];
      $P=$this->RealPathStr($Path->Make());
      If(!Is_Dir($P))
        Return $Res;
      Return ListDir($P, $Mask, $Attr);
    }
 
    Function Nodes($Path)
    {
      If(!$this->IsFile($Path))
        Return [];
      $Res=[];
      $Res[]=$this->Node($Path);
      Return $Res;
    }
 
    Function Include($Include_Path, $UnPack_Vars=[], $Pack_Vars=[])
    {
      Extract($UnPack_Vars);
      $Res=Include $this->RealPathStr($Include_Path);
      ForEach($Pack_Vars As $Pack_Var)
        $UnPack_Vars[$Pack_Var]=${$Pack_Var};
      Return $Res;
    }
 
    Function URL($Path)
    {
      Return $this->BaseURL->Node($Path);
    }
  }
?>