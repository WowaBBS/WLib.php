<?
  $Loader->Parent_Class('/FS/Driver/Base/Provider');
  $Loader->Load_Type('/FS/Path'  );
  $Loader->Load_Type('/Inet/Url' );

  Class C_FS_Driver_System_Provider Extends C_FS_Driver_Base_Provider
  {
    Var $BasePath = False;
    Var $BaseURL  = False;
 
     Function _Init($Args)
     {
      parent::_Init($Args);
      $this->BasePath = T_FS_Path  ::Create();
      $this->BaseURL  = T_Inet_Url ::Create();
    }
 
    Function RealPathStr($Path)
    {
      $P=$this->BasePath->_Clone();
      $P->Add($Path);
      Return $P->Make();
    }
 
    Function IsFile($Path)
    {
      $P=$this->RealPathStr($Path->Make());
      Return Is_File($P);
    }
 
    Function IsDir($Path)
    {
      $P=$this->RealPathStr($Path->Make());
      Return Is_Dir($P);
    }
 
    Function Exists($Path)
    {
      $P=$this->RealPathStr($Path->Make());
      Return Is_Dir($P)||Is_File($P);
    }
 
    Function Stream($Path, $AMode)
    {
      $P=$this->RealPathStr($Path->Make());
      $Res=$this->Create_Object('Stream/File');
      $Res->Assign($P);
      $Res->Open($AMode);

      Return $Res;
    }
 
    Function Files($Path, $Mask=False, $Attr=3)
    {
      $Res=[];
      $P=$this->RealPathStr($Path->Make());
      If(!Is_Dir($P))
        Return $Res;
      Return ListDir($P, $Mask, $Attr);
    }
 
    Function Nodes($Path)
    {
      If(!$this->IsFile($Path))
        Return [];
      $Res=[];
      $Res[]=$this->Node($Path);
      Return $Res;
    }
 
    Function IncludePhp($IncludePhp_Path, $UnPack_Vars=[], $Pack_Vars=[])
    {
      Extract($UnPack_Vars);
      $Res=Include $this->RealPathStr($IncludePhp_Path);
      ForEach($Pack_Vars As $Pack_Var)
        $UnPack_Vars[$Pack_Var]=${$Pack_Var};
      Return $Res;
    }
 
    Function URL($Path)
    {
      Return $this->BaseURL->Node($Path);
    }
  }
?>