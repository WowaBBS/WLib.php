<?
  $Loader->Load_Class('/Object');
  $Loader->Load_Type('/Inet/Addr/Mac/V6');
  
  Use T_Inet_Addr_Mac_V6 As Mac;
  
  Class C_Inet_Addr_Mac_Factory Extends C_Object
  {
    Protected $Current=Null;
  
    Function Current() { Return $this->Current??=New Mac($this->_Current()); }
    
    Function _Current()
    {
      ForEach(Net_Get_Interfaces()As $NI)
        If(($NI['up']?? False)&&($Mac=$NI['mac']?? ''))
          If($Mac=$this->_Parse($Mac))
            Return $Mac;
      Return Random_Bytes(6); //TODO: Save into config
    }
    
    Var $Formats=[
      ['[0-9a-f]{0,2}(?::[0-9a-f]{0,2}){5}' ,':', 6, 2], // 08:00:2b:01:02:03 8::2b:1:2:3
      ['[0-9a-f]{2}(?:-[0-9a-f]{2}){5}'     ,'-', 6, 2], // 08-00-2b-01-02-03
      ['[0-9a-f]{4}(?:\.[0-9a-f]{4}){2}'    ,'.', 3, 4], // 0800.2b01.0203,
      //TODO: Need? 08002b:010203, 08002b-010203, 0800-2b01-0203, 08002b010203
    ];
    
    Function Parse($Mac) { Return New Mac($this->_Parse($Mac)); }
    
    Function _Parse($Mac)
    {
      ForEach($this->Formats As [$RegExp, $Split, $Count, $Chars])
        If(Preg_Match('/^'.$RegExp.'$/Ssi', $Mac))
        {
          $Mac=Explode($Split, $Mac, $Count);
          $Mac=Array_Map(fn($v)=>Str_Pad($v, $Chars, '0', STR_PAD_LEFT), $Mac);
          $Mac=Implode('', $Mac);
          Return Hex2Bin($Mac);
        }
      Return Null;
    }
  }
?>