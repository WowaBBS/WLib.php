<?
  $Loader->Parent_Class('/Object');
  $Loader->Load_Interface('/Debug/Custom');
  
  class C_Log_Format extends C_Object
  {
    Var $Stream    ;
    Var $WriteLn   =false;
    Var $Manager   ;
    Var $UseBuffer =True;
    
    Function _Init(Array $Args)
    {
      parent::_Init($Args);
      
      $Manager =$Args['Manager' ]?? $this->Get_Singleton('/Debug/Manager');
      $Stream  =$Args['Stream'  ]?? Null;
      $Buffer  =$Args['Buffer'  ]?? True;
      $this->UseBuffer=!Is_Array($Buffer) && $Buffer;
      
      if($this->UseBuffer)
      {
        If(!Is_Array($Buffer))
          $Buffer=[];
        $Stream  =$this->Create_Object('/Log/Logger/Buffer', ['Stream'=>$Stream]+$Buffer);
      }
    
      $this->Manager  =$Manager  ;
      $this->Stream   =$Stream   ;
      $this->Template =$Args['Template'  ]?? $this->Get_Singleton('/Debug/Template');
      $this->Level    =$Args['Level'     ]?? -1;
      $TimeStamp      =$Args['TimeStamp' ]?? False;
      If($TimeStamp===True) $TimeStamp=$this->TimeFormat;
      //TODO: Time format
      $this->TimeFormat =$TimeStamp;
    }
    
    Function SetStream($Stream)
    {
      if($this->UseBuffer)
        return $this->Stream->Stream_Set($Stream);
      $Res=$this->Stream;
      $this->Stream=$Stream;
      return $Res;
    }
  
    Function _Write($v, $Lf="\n")
    {
      $CountLf=0;
      if($v==='') return;
      
      $Stream=$this->Stream;
      if($this->WriteLn)
      {
        $this->WriteLn=false;
        $Stream->Write($this->Tab);
      }
      if(($p=StrPos($v, "\n"))!==False)
      {
        $Lines=Explode("\n", $v);
        $v=Array_Pop($Lines);
        if(StrLen($v)===0)
        {
          $v=Array_Pop($Lines);
          $Stream->Write($Lf); $CountLf++;
          $this->WriteLn=true;
        }
        $Tab=$this->Tab;
        ForEach($Lines As $Line)
        {
          $Stream->Write($Line);
          $Stream->Write($Lf); $CountLf++;
          $Stream->Write($Tab);
        }
      }
      
      $Stream->Write($v);
      return $CountLf;
    }

    Function WriteLn($s='')
    {
      $this->_Write($s);
      if($this->IsInline<=0)
      {
        if($this->WriteLn)
          $this->Stream->Write($this->Tab);
        $this->Stream->Write("\n");
        $this->WriteLn=true;
      }
    }
    
    Function Flush()
    {
      $this->Stream->Flush();
    }
    
    //****************************************************************

  //Var $Manager  ;
    
    //****************************************************************
    // Tab
    Var $Tab      ="";

    Function Tab_Push($AddTab)
    {
      if($this->IsInline>0) return false;
      if(StrLen($AddTab)==0) return false;
      $Tab=&$this->Tab;
      $OldTab=$Tab; $Tab.=$AddTab;
      return $OldTab;
    }
    
    Function Tab_Pop($OldTab) { if($OldTab!==false) $this->Tab=$OldTab; }
    

    //****************************************************************
    // Level
    
    Var $Level    =-1;
    
    Function Level_End() { return $this->Level===0; }
    Function Level_Inc() { $this->Level--; }
    Function Level_Dec() { $this->Level++; }
    
    //****************************************************************
    // Inline

    Var $IsInline=0;
    
    Function IsInline() { return $this->IsInline>0; }
    Function Inline_Begin() { $this->IsInline++; }
    Function Inline_End() { $this->IsInline--; }
    Function NoInline() { $Res=$this->IsInline; $this->IsInline=0; return $Res; }
    Function EndNoInline($SaveInline) { $this->IsInline=$SaveInline; }
    
    //****************************************************************
    // Magic call
    
    Function __Invoke($Value, $Type=Null)
    {
      $Type? $this->_WriteToken($Type, $Value):$this->WriteItem($Value);
    }
    
    //****************************************************************
    // Debug
    
    Var $Path      =[];
    Var $Recursive =[];
    
    Function Debug($v, $Level=false)
    {
      $SaveState=$this->GetState();
      $this->SetState();
      if($Level!==false)
        $this->Level=$Level;
      $this->Value($v);
      if(!$this->IsInline())
        $this->Stream->Write("\n");
      $this->Flush();
      $this->SetState($SaveState);
    }
    
    Function GetState()
    {
      return [
        'Level'     =>$this->Level     ,
        'Recursive' =>$this->Recursive ,
        'Path'      =>$this->Path      ,
      ];
    }
 
    Function SetState($State=[])
    {
      $this->Level     =$State['Level'    ]?? -1;
      $this->Recursive =$State['Recursive']?? [];
      $this->Path      =$State['Path'     ]?? [];
    }
 
    //****************************************************************
    Var $Template =null;
    
    Function Value($v)
    {
      $this->Template->Value($this, $v);
    }
 
    Function CallFunc($Func, $Args)
    {
      $this->Template->CallFunc($this, $Func, $Args);
    }
   
    Function NewClass($Class, $Args)
    {
      $this->CallFunc('new '.$Class, $Args);
    }
 
    Function Inline_CallFunc($Func, $Args)
    {
      $this->Inline_Begin();
      $this->CallFunc($Func, $Args);
      $this->Inline_End();
    }
   
    Function Inline_NewClass($Class, $Args)
    {
      $this->Inline_Begin();
      $this->NewClass($Class, $Args);
      $this->Inline_End();
    }

    Function NoInline_CallFunc($Func, $Args)
    {
      $Save=$this->NoInline();
      $this->CallFunc($Func, $Args);
      $this->EndNoInline($Save);
    }
   
    Function NoInline_NewClass($Class, $Args)
    {
      $Save=$this->NoInline();
      $this->NewClass($Class, $Args);
      $this->EndNoInline($Save);
    }
    
    //****************************************************************
    
    Function _WriteL(Array $l, $Cr="\n")
    {
      $CountLf=0;
      ForEach($l As $v)
        $CountLf+=$this->_Write($v, $Cr);
      return $CountLf;
    }
    
    Static Function _GetTokens()
    {
      Static $Res=[
        'Def'       =>''        ,

        'TimeStamp' =>'Def'     ,
        
        'Resvd'     =>'Def'     ,
        'Num'       =>'Def'     ,
        'Str'       =>'Def'     ,

        'Op'        =>'Resvd'   ,
        'Type'      =>'Resvd'   ,
        'Null'      =>'Resvd'   ,
        'Bool'      =>'Resvd'   ,

        'Float'     =>'Num'     ,
        'Name'      =>'Str'     ,

        'File'      =>'Name'    ,
        'Func'      =>'Name'    ,
        'Class'     =>'Name'    ,

        'Debug'     =>'Def'     ,
        'Log'       =>'Def'     ,
        'Note'      =>'Log'     ,
        'Warning'   =>'Note'    ,
        'Error'     =>'Warning' ,
        'Fatal'     =>'Error'   ,
      ];
      Return $Res;
    }
    
    Function _WriteToken($Type, String $v)
    {
      $this->_Write($v);
    }
      
    Function Write(...$l)
    {
    //$this->Inline_Begin();
      ForEach($l As $v)
        $this->WriteItem($v);
    //$this->Inline_End();
    }
      
    Function WriteItem($v)
    {
    //echo '[',GetType($v),']';

      Switch(GetType($v))
      {
      Case 'boolean'       : $this->WriteBool  ($v); break;
      Case 'integer'       : $this->WriteNum   ($v); break;
      Case 'double'        : $this->WriteFloat ($v); break;
      Case 'string'        : $this->WriteText  ($v); break;
      Case 'NULL'          : $this->WriteNull  (  ); break;
    //Case 'float'         : $this->WriteFloat ($v); break;
      Default              :
        if($v InstanceOf I_Debug_Custom)
        {
          $v->Debug_Write($this);
        }
        Else
        {
          $this->Inline_Begin();
          $this->Debug($v, 3);
          $this->Inline_End();
        }
      }
    }
    
    Function Begin($v) {}
    Function End($v) {}
    
    Function BeginProgress() {}
    Function EndProgress() {}
             
    // Simple types
    Function WriteDef   ($v     ) { $this->_WriteToken('Def'   ,$v); }
    Function WriteOp    ($v     ) { $this->_WriteToken('Op'    ,$v); }
    Function WriteResvd ($v     ) { $this->_WriteToken('Resvd' ,$v); }
    Function WriteNum   ($v     ) { $this->_WriteToken('Num'   ,$v); }
    Function WriteStr   ($v     ) { $this->_WriteToken('Str'   ,$v); }
    Function WriteText  ($v     ) { $this->_WriteToken('Text'  ,$v); }
    Function WriteName  ($v     ) { $this->_WriteToken('Name'  ,$v); }
    Function WriteFile  ($v     ) { $this->_WriteToken('File'  ,$v); }
    Function WriteFunc  ($v     ) { $this->_WriteToken('Func'  ,$v); }
    Function WriteType  ($v     ) { $this->_WriteToken('Type'  ,$v); }
    Function WriteClass ($v     ) { $this->_WriteToken('Class' ,$v); }
    Function WriteFloat ($v     ) { $this->_WriteToken('Float' ,$v); }
    Function WriteNull  ($v=null) { $this->_WriteToken('Null'  ,Is_Null($v)? 'null':$v); }
    Function WriteBool  ($v     ) { $this->_WriteToken('Bool'  ,Is_Bool($v)? ($v? 'True':'False'):$v); }
    Function NewLine() { $this->_WriteToken('NewLine', "\n"); }
    
    Function WriteRecursive($Path)
    {
      $this->WriteResvd('Recursive');
      $this->WriteText(' ');
      $this->WritePath($Path);
    }
    
    Function WritePath($Path)
    {
      ForEach($Path As $k=>$Item)
      {
        if($k)
          $this->WriteOp('.');
      //$this->WriteText($Item);
        $this->WriteName($Item);
      }
    }
  
    Function WriteLogLevel($View, $Level) { $this->_WriteToken($Level->Name, $View); }
    
    // TODO: Y-m-d H:i:s.u  Y-m-d H:i:s.v
    Var $TimeFormat ='Y-m-d H:i:s';
  //Var $TimeFormat ='ymd His';
    Var $TimeFrac   = ['.%04d', 1E4];
    
    Function WriteTimeStamp($v)
    {
      $F=$this->TimeFormat;
      If(!$F) Return;
      If($f=$this->TimeFrac)
      {
        $t=Floor($v);
        $ms=SPrintF($f[0], ($v-$t)*$f[1]);
      }
      Else
        $ms='';
      $this->_WriteToken('TimeStamp' ,'['.GmDate($F, $t).$ms.'] ');
    }
    
    // Structs
    Function File($File, $Line=False, $Col=False)
    {
      $this->Begin('File');
      $z1=$File !==false;
      $z2=$Line !==false && $Line>0;
      $z3=$Col  !==false;

      if($z1)
        $this->WriteFile($File);
      if($z2 || $z3)
      {
                        $this->WriteOp  ('('   );
         if($z2       ) $this->WriteNum ($Line );
         if($z1 && $z3) $this->WriteOp  (','   );
         if($z3       ) $this->WriteNum ($Col  );
                        $this->WriteOp  (')'   );
      }
      if($z1) $this->WriteDef(' ');
      $this->End('File');
    }
    
    Function StackFrame(Array $Frame, Int $Idx=0)
    {
      $this->WriteNum('#'.$Idx.' ');
      if(IsSet($Frame['file']) || IsSet($Frame['line']))
        $this->File(
          $Frame['file']?? '',
          $Frame['line']?? ''
        );
      $this->WriteDef(' ');
      if(IsSet($Frame['class']))
      {
        $this->WriteClass($Frame['class']);
        if(IsSet($Frame['object']))
          if($Frame['class']!==Get_Class($Frame['object']))
          {
            $this->WriteOp('(');
            $this->WriteClass(Get_Class($Frame['object']));
            $this->WriteOp(')');
          }
        $this->WriteOp('::');
      }
      $this->WriteFunc($Frame['function' ]);
      $Args = '';
      If(IsSet($Frame['args']))
      {
        $this->WriteOp('(');
        ForEach($Frame['args']As $i=>$Arg)
        {
          if($i)
            $this->WriteOp(', ');
          // TODO: $this->DebugL($Arg,3);
          Switch(GetType($Arg))
          {
          Case 'boolean'       : $this->WriteBool  ($Arg                    ); break;
          Case 'integer'       : $this->WriteNum   ($Arg                    ); break;
          Case 'double'        : $this->WriteFloat ($Arg                    ); break;
          Case 'string'        : $this->WriteStr   ("'".$Arg."'"            ); break;
          Case 'NULL'          : $this->WriteNull  (                        ); break;
        //Case 'float'         : $this->WriteFloat ($Arg                    ); break;
          Case 'unknown type'  : $this->WriteDef   ($Arg                    ); break;
          Case 'user function' : $this->WriteDef   ($Arg                    ); break;
          Case 'object'        :
          Case 'array'         :
          Case 'resource'      :
          Default              :
            $this->Debug($Arg, 1);
          }
        }   
        $this->WriteOp(')');
      }
      $this->NewLine();
    }
    
    Function Stack(Array $List)
    {
      $Idx=0;
      ForEach($List As $Frame)
        $this->StackFrame($Frame, ++$Idx);
    }
    
    Function LogItem(T_Log_Item $Item)
    {
      $this->Stream->Begin();
      $Item->ToFormat($this);
      $this->Stream->End();
    }
  }
?>