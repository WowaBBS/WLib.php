<?
  $Loader->Parent_Class('/Object');
  $this->Load_Type('/Log/Item');
 
  Class C_Log_Logger extends C_Object
  {
    Var $Disabled=false;
    Var $ShowLogLevel=[];
  
    Function _Init(Array $Args)
    {
      $this->SetLogLevel($Args['LogLevel']??'Debug');
      parent::_Init($Args);
    }
    
    Function SetLogLevel($Level)
    {
      $Res=[]; // TODO: Static
      if(Is_Array($Level))
      {
        ForEach(T_Log_Level::GetList() As $Item)
          $Res[$Item->Name]=false;
        ForEach($Level As $Item)
          $Res[$Item]=true;
      }
      elseIf(Is_String($Level))
      {
        $Index=T_Log_Level::GetByName($Level, 'Debug')->Index;
        ForEach(T_Log_Level::GetList() As $Item)
          $Res[$Item->Name]=$Item->Index>=$Index;
      }
      else
        return $this->Loader->Log('Fatal', 'unsuported level type ', GetType($Level));
      $this->ShowLogLevel=$Res;
    }
    
    Function GetLogger() { return $this; }
    
    Final Function LogItem($LogItem)
    {
      if($this->Disabled)
        return;
      if(!$this->ShowLogLevel[$LogItem->Level->Name])
        return;
      $this->_LogItem($LogItem);
    }
    
    Protected Function _LogItem($LogItem)
    {
      $this->Write($LogItem->ToString());
      $this->Flush();
    }
    
    Function Write($Str)
    {
      UnUsed();
    }

    Function Flush()
    {
      UnUsed();
    }
    
    Function CloseAndRemoveIsEmpty():bool
    {
      return true;
    }
 
    Function Error_Handler($ErrNo, $ErrStr, $ErrFile, $ErrLine, $Vars)
    {
      If($ErrNo==2048)
        Return;
      static $ErrorTypes=[
        1    => ['Error'   ,'Error'           ],
        2    => ['Warning' ,'Warning'         ],
        4    => ['Error'   ,'Parsing Error'   ],
        8    => ['Error'   ,'Notice'          ],
        16   => ['Error'   ,'Core Error'      ],
        32   => ['Warning' ,'Core Warning'    ],
        64   => ['Error'   ,'Compile Error'   ],
        128  => ['Warning' ,'Compile Warning' ],
        256  => ['Error'   ,'User Error'      ],
        512  => ['Warning' ,'User Warning'    ],
        1024 => ['Note'    ,'User Notice'     ],
        2048 => ['Note'    ,'Runtime Notice'  ],
        4096 => ['Error'   ,'Fatal error'     ],
      ];
  
      $ErrorType=$ErrorTypes[$ErrNo]?? ['Error',''];
      $Res=$ErrStr;
    //$Res=' ['.$ErrNo.'] '.$ErrStr;
      $this->Log($ErrorType[0], $Res)->File($ErrFile, $ErrLine)->BackTrace(2);
    }
    
    Function Set_Error_Handler()
    {
      if(($this->Error_Handler_Setted?? false))
        return;
      Set_Error_Handler([$this, 'Error_Handler']);
      $this->Error_Handler_Setted=true;
    }
    
    Function Restore_Error_Handler()
    {
      if(!($this->Error_Handler_Setted?? false))
        return;
      Restore_Error_Handler();
      UnSet($this->Error_Handler_Setted);
    }
  };
?>