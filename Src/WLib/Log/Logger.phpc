<?
  $Loader->Parent_Class('/Object');
  $this->Load_Type('/Log/Item');
 
  Class C_Log_Logger extends C_Object
  {
    Var $Disabled=false;
    Var $ShowLogLevel=[];
    Var $Tags=[];
    
    Static $Tags_Default=['Default'=>True];
    
    Function _Init(Array $Args)
    {
      $this->SetLogLevel ($Args['LogLevel' ]?? 'Debug');
      $this->Tags        ($Args['Tags'     ]?? Static::$Tags_Default);
      parent::_Init($Args);
    }
    
    Function IsValid()
    {
      return true;
    }
    
    Function SetLogLevel($Level)
    {
      $Res=[]; // TODO: Static
      if(Is_Array($Level))
      {
        ForEach(T_Log_Level::GetList() As $Item)
          $Res[$Item->Name]=false;
        ForEach($Level As $Item)
          $Res[$Item]=true;
      }
      elseIf(Is_String($Level))
      {
        $Index=T_Log_Level::GetByName($Level, 'Debug')->Index;
        ForEach(T_Log_Level::GetList() As $Item)
          $Res[$Item->Name]=$Item->Index>=$Index;
      }
      else
        return $this->Object_GetLoader()->Log('Fatal', 'unsuported level type ', GetType($Level));
      $this->ShowLogLevel=$Res;
      return $this;
    }
    
    Function Tags($Tags)
    {
      $Res=$this->Tags; //[];
      ForEach($Tags As $k=>$v)
        If(Is_Integer($k))
          $Res[$v]=True;
        ElseIf($v===Null)
          UnSet($Res[$k]);
        Else
          $Res[$k]=$v;
      $this->Tags=$Res;
      Return $this;
    }
    
    Function GetLogger() { return $this; }
    
    Function IsDisabled() { return $this->Disabled; }
    
    Final Function LogItem($LogItem)
    {
      If($this->IsDisabled())
        Return;
      If(!$this->ShowLogLevel[$LogItem->Level->Name])
        Return;
      If($LogItem->Exclude[$this->Object_GetId()]?? False)
        Return;
      If(!$LogItem->CheckTags($this->Tags))
        Return;
      $this->_LogItem($LogItem);
    }
    
    Protected Function _LogItem($LogItem)
    {
      $this->Write($LogItem->ToString());
      $this->Flush();
    }
    
    Function Write($Str)
    {
      UnUsed();
    }

    Function Flush()
    {
      UnUsed();
    }
    
  //Function CloseAndRemoveIsEmpty():bool { return true; }
  
    Function Enable($v=true) { $this->Disabled=!$v; }
    Function Disable($v=true) { $this->Disabled=$v; }

    Function GetTime() { Return MicroTime(True); }
  # Function GetTime()
  # {
  #   Static $Diff;
  #   $Diff??=MicroTime(True)-HrTime(True)*1e-9;
  #   Return HrTime(True)*1e-9+$Diff;
  # }
    
  //****************************************************************
    Function SetHandler($NotRemove=True)
    {
      $Handler=$this->Get_Singleton('/Log/Handler');
      $Old=$Handler->GetOverridedLogger();
      If($NotRemove)
      {
        $Handler->SetLogger($this);
        Return $Old;
      }
      ELse
      {
        If($Old===$this)
          $Handler->SetLogger(Null);
      }
    }
  
  //****************************************************************
    Protected Function _Debug_Info(Array &$Res)
    {
      if(IsSet($Res['Back_Memory' ])) unset($Res['Back_Memory' ]);
    }
    
  //****************************************************************
  };
?>