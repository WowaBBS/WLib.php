<?
  $Loader->Parent_Class('/Log/Logger');
 
  Class C_Log_Logger_Base extends C_Log_Logger
  {
    Var $IsWritting =0    ;
    Var $Format     =null ;
    Var $Importance =0    ;
  
    Function _Init(Array $Args)
    {
      Static $DefaultFormat='/Log/Format';
      $Format=$Args['Format']?? $DefaultFormat;
      if(!Is_Object($Format))
      {
        if(Is_Array($Format))
          $Format=$this->Get_Singleton($Format['Class']?? $Format[0]?? $DefaultFormat, $Format);
        Else
          $Format=$this->Get_Singleton($Format);
      }
      $this->Format=$Format;
      parent::_Init($Args);
    }
    
    Function AddImportance($v)
    {
      $this->Importance+=$v;
    }
    
    Function _LogItem($LogItem)
    {
      if($this->IsWritting>1)
        return;
      $this->IsWritting++;
      
      {
        $this->AddImportance($LogItem->Importance);
        $Format=$this->Format;
        $Old=$Format->SetStream($this);
        $Format->LogItem($LogItem);
      //$this->Write($LogItem->ToString());
        $Old=$Format->SetStream($Old);
        If($Old!=$this)
          $this->Log('Error', 'Stream can\'t be restoed');
      }
      
      $this->Flush();
      $this->IsWritting--;
    }
    
    Function Write($Str)
    {
      UnUsed();
    }

    Function Flush()
    {
      UnUsed();
    }
  };
?>