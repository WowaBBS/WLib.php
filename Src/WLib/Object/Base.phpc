<?
//$Loader->Load_Class('/Object/Base');

  Class C_Object_Base
  {
    Private Static $Object_Counter=0;
    Var     $Object_Id     ;
    Var     $Object_Loader =null;
 
    //****************************************************************
    // Object

    Function Object_GetWeak() { return WeakReference::Create($this); }
    Function Object_GetLoader() { return $this->Object_Loader; }
    Function GetLoader() { return $this->Object_Loader; }

  //Static Function Cr($Owner, $Args):Static { return $Owner->Create_Object(Static::Class, $Args); }
    
    //****************************************************************
    // Context
    
    Function Create_Object($Name, Array $Args=[], Array $Mode=[])
    {
      $Args['Outer']=$this;
      return $this->Object_GetLoader()->Create_Object($Name, $Args, $Mode);
    }

    Function Get_Singleton($Name, Array $Args=[], Array $Mode=[])
    {
      return $this->Object_GetLoader()->Get_Singleton($Name, $Args, $Mode);
    }
    
    //****************************************************************
    // Debug And Log
    
    Function ToDebugInfo() { return Get_Class($this).'('.$this->_ToDebugInfo().')'; }
    Function _ToDebugInfo() { return $this->Object_Id; }
    
    Function GetLogger() { Return $this->Object_GetLoader()->GetLogger(); }
    Function Debug($Var, $Level=-1) { Return $this->Object_GetLoader()->Debug($Var, $Level); }
    Function Log($LogLevel, ...$Args) { return New T_Log_Item($this, $this->GetLogger(), $LogLevel, $Args); }

    Protected Function _Debug_Info(Array &$Res)
    {
      if($this->Object_GetLoader()!==null) UnSet($Res['Object_Loader'        ]);
      if($this->Object_Inited===True) UnSet($Res['Object_Inited' ]);
    }
    
    /// Debug manager
    Final Function _Debug_Serialize(Array &$Res) { $this->_Debug_Info($Res); }
    
    Final Function __debugInfo()
    {
    //throw new Exception('!!!!!!!!!!!!!!!!!!!!');
    //$Res=Get_Object_Vars($this);
      $Res=[];
      ForEach((Array)$this As $k=>$v)
      {
        $k=Explode("\0", $k);
        $Res[End($k)]=$v;
      }
      $this->_Debug_Info($Res);
      return $Res;
    }
    
    //****************************************************************
    // Time life

    Private $Object_Inited =False;
    
    Function IsObjectInited() { return $this->Object_Inited; }
    
    Final Function __Construct(Array $Args)
    {
      $this->Object_Id=Self::$Object_Counter++;
      $this->Object_Loader=$Args['Loader'];
      UnSet($Args['Loader']);
      $this->_Init($Args);
      if(!$this->Object_Inited)
        throw new Exception('Initializing is not fully');
    //Trigger_Error('Initializing is not fully', E_USER_ERROR); // WARNING
    }
  
    Final Function __Destruct()
    {
      // TODO: Check locking
      if($this->Object_Inited)
        $this->Done();
    }
  
    Protected Function _Init(Array $Args)
    {
      $this->Object_Inited=true;
    }

    Protected Function _Done()
    {
      $this->Object_Inited=false;
    }
    
    Final Function Done()
    {
      if(!$this->Object_Inited)
        throw new Exception('Object '.Get_Class($this).' hasn`t initialized');
      $this->_Done();
      if($this->Object_Inited)
        throw new Exception('Destroing is not fully');
    }
    
    Function _Lock() { return $this; }
    Function _UnLock() {}
 
    //****************************************************************
    // Clone

    Function Clone() { return clone $this; }
    
    Protected Function _Cloneable() { return false; }
    Protected Function _Clone()
    {
      $this->Object_Inited=true;
    }
    
    Final Function __clone()
    {
      if(!$this->_Cloneable())
        throw new Exception('Object can`t be cloned');
      if(!$this->Object_Inited)
        throw new Exception('Object hasn`t initialized');
      $this->Object_Id=Self::$Object_Counter++;
      $this->Object_Inited=false;
      $this->_Clone();
      if(!$this->Object_Inited)
        throw new Exception('Initializing is not fully');
    }

    //****************************************************************
    // Reflexion
    
  # Static Function Get_Class_Vars($Class)
  # {
  #   return Get_Class_Vars($Class);
  # }
    //****************************************************************
  }
?>