<?
  Class C_Object_Loader
  {
    Var $_Paths =['./Lib/'];
    Var $_Libs  =[];
    Var $_Singleton  =[];
    Var $Included_Files=[]; //< TODO: Remove?
  //Var $LoadingClass='';
    
    Function AddSearchPath($Path)
    {
      if(Is_Array($Path))
      {
        ForEach($Path As $Item)
          $this->AddSearchPath($Item);
        return;
      }
      $Path=StrTr(RealPath($Path), '\\', '/');
      if(SubStr($Path, -1)=='/')
        $Path=SubStr($Path, 0, -1);
    //if(SubStr($Path, -1)!='/')
    //  $Path.='/';
    //$this->Log('Log', 'AddSearchPath ', $Path);
      $this->_Paths[]=$Path;
    }
 
    Function Loader_Init($APath_Libs)
    {
    //If(Is_Object($APath_Libs))
    //{
    //  //$this->Loader_Info[SL_Path_Libs]=$APath_Libs->Loader_Info[SL_Path_Libs];
    //  $this->Loader_Info=&$APath_Libs->Loader_Info;
    //  $this->Path=&$APath_Libs->Path;
    //}
    //Else
      {
        $this->_Paths=[];
        $this->AddSearchPath($APath_Libs);
      //$this->Load_Lib('/All');
   
      //$this->Load_Type('/System/Path');
      //$this->Path=New T_System_Path();
   
      //$this->Load_Type('/System/Event');
      //$this->ShutDown_List=New T_System_Event();
      //$this->ExitProc_List=New T_System_Event();
   
   
      //$this->Load_Lib('/Support/PHP4');
        $this->Load_Class('/Object/Base');
        $this->Load_Type('/Log/Item');
      //$this->Loader_Info=&$this->Loader_Info;
      }
    //Register_ShutDown_Function([&$this, 'ShutDown']);
    //$this->Add_ShutDown([&$this, 'Done']);
    }
    
    Function _Find_Lib(String $Name, String $Ext='')
    {
      if($Name[0]!=='/')
      {
        $this->Log('Error', 'Lib`s name "', $Name, '" should be started with /');
        $Name='/'.$Name;
      }
      ForEach($this->_Paths as $__Path)
      {
        $_Path=$__Path.$Name.$Ext;
        If(Is_File($_Path))
        {
          if(true) // Check windows only
          {
            $_RPath=StrTr(RealPath($_Path), '\\', '/');;
            if($_RPath!==$_Path)
            { 
              $this->Log('Error', ' _Find_Lib:', "\n",
                '  Excepted path ', $_RPath ,"\n",
                '  Actual   path ', $_Path  
              );
              return $_Path;
            }
          }
          return $_Path;
        }
      }
      return false;
    }
    
    Function _Verify_Begin($Verify)
    {
     #ifdef Debug
      switch($Verify)
      {
      case 'Class'     : return count(Get_Declared_Classes    ());
      case 'Interface' : return count(Get_Declared_Interfaces ());
      }
     #endif // Debug
      $this->Log('Fatal', 'Unreachable place');
    }
    
    Function _Verify_End($Verify, $Var, $Class)
    {
     #ifdef Debug
      switch($Verify)
      {
      case 'Class'     : $List=Get_Declared_Classes    (); $Class='C'.$Class; break;
      case 'Interface' : $List=Get_Declared_Interfaces (); $Class='I'.$Class; break;
      }
      for($i=$Var, $c=Count($List); $i<$c; $i++)
        if($List[$i]===$Class)
          return true;
      for($i=$Var, $c=Count($List); $i<$c; $i++)
        if(StrCaseCmp($List[$i], $Class)===0)
        {
          $this->Log('Error', 'class name error: ', $Class, ' in not same ', $List[$i]);
          return true;
        }
      $this->Log('Error', 'class ', $Class, ' not found');
     #endif // Debug
    }
    
    Function _Load_Lib(String $Name, Array $Mode=[], String $Ext='.php', $Verify='')
    {
      $AZSafe=$Mode['Safe'] ?? False;
    //$Name=StrToLower($Name);
      if($Name[0]!=='/')
      {
        $this->Log('Error', 'Lib`s name "', $Name, '" should be started with /');
        $Name='/'.$Name;
      }
      $_Libs=&$this->_Libs;
      If(IsSet($_Libs[$Name]))
        Return $_Libs[$Name];
      $Res=Str_Replace('/', '_', $Name);
      //////
      $_Path=$this->_Find_Lib($Name, $Ext);
      If($_Path===False) $Res=False; Else
      {
        if($Verify)
          $VerifyVars=$this->_Verify_Begin($Verify);
        $Loader=&$this;
        If($AZSafe) { If(!Include_Once($_Path)) $Res=False; }
        Else        { If(!Require_Once($_Path)) $Res=False; }
        if($Verify)
          $this->_Verify_End($Verify, $VerifyVars, $Res);
      }
      If($Res)
        $this->Included_Files[$Name.$Ext]=$_Path;
      ElseIf(!$AZSafe)
      {
        Trigger_Error('Can`t load lib '.$Name.$Ext, E_USER_WARNING);
        UnSupport();
      }
      $_Libs[$Name]=$Res;
      Return $Res;
    }
 
    Function Load_Lib($Name, Array $Mode=[])
    {
      $this->_Load_Lib($Name, $Mode);
    }
 
    Function Load_Class($Name, Array $Mode=[])
    {
      $Res=$this->_Load_Lib($Name, $Mode, '.phpc', 'Class');
      Return $Res? 'C'.$Res:$Res;
    }
 
    Function Load_Interface($Name, Array $Mode=[])
    {
      $Res=$this->_Load_Lib($Name, $Mode, '.phpi', 'Interface');
      Return $Res? 'I'.$Res:$Res;
    }
 
    Function Create_Object($Name, Array $Args=[], Array $Mode=[])
    {
      $Res=$this->Load_Class($Name, $Mode);
      If(!$Res)
        Return $Res;
      $Class_Name=$Res;
  
      If(!IsSet($Args['Outer'  ])) $Args['Outer'  ]=&$this;
      If(!IsSet($Args['Loader' ])) $Args['Loader' ]=&$this;
      $Res=New $Class_Name($Args);
     #ifdef Debug
     #if(get_class($Res)!==$Class_Name)
     #  this->Log('Error', 'Class name error: ', get_class($Res), '!==', $Class_Name);
     #endif // Debug
      Return $Res;
    }
    
    Function Get_Singleton($Name, Array $Args=[], Array $Mode=[])
    {
      $Key=Count($Args)? $Name.Serialize($Args):$Name;
      $S=&$this->_Singleton;
    //this->Log('Log', 'GetSinlgeton(', $Key ,')[', Implode(', ', Array_Keys($S)), ']');
      if(IsSet($S[$Key]))
        $Res=$S[$Key];
      else
        $Res=$S[$Key]=$this->Create_Object($Name, $Args, $Mode);
      return $Res;
    }
 
    Function Object($Name, Array $Args=[], Array $Mode=[])
    {
      throw new Exception('Not implemented');
      //see: D:\MyWeb\_files\wlib\system\loader.phpc
      // This is creating singleton from System/Singleton/
    }
    
    Function Using_Class     ($Name) {}
    Function Using_Interface ($Name) { $this->Load_Interface ($Name); }
    Function Using_Module    ($Name) { $this->Load_Module    ($Name); } // TODO: Rename lib
    Function Using_Type      ($Name) { $this->Load_Type      ($Name); } // TODO: Rename struct
    Function Using_Struct    ($Name) { $this->Load_Struct    ($Name); } // TODO: Rename struct
    
    Function Load_Module ($Name, Array $Mode=[]) { Return $this->_Load_Lib($Name, $Mode, '.phpm'); } // TODO: Rename lib
    Function Load_Type   ($Name, Array $Mode=[]) { Return $this->_Load_Lib($Name, $Mode, '.phpt'); } // TODO: Rename struct
    Function Load_Struct ($Name, Array $Mode=[]) { Return $this->_Load_Lib($Name, $Mode, '.phpt'); } // TODO: Rename struct
 
    Function Class_Implements ($Name) { $this->Load_Interface ($Name); }
    Function Class_Extends    ($Name) { $this->Load_Class     ($Name); }
    Function Parent_Class     ($Name) { $this->Load_Class     ($Name); }
    
    Function Begin_Module () {}
    Function Begin_Class  () {}
    Function Begin_Type   () {}
    Function Begin_Lib    () {}
    
    Function End_Module () {}
    Function End_Class  () {}
    Function End_Type   () {}
    Function End_Lib    () {}

    //****************************************************************
    // Debug And Log
    
    Var $Logger=null;
    
    Function Debug($Var, $Level=-1) // TODO: Return Debug object
    {
      $Deb=$this->Get_Singleton('/Debug/Manager')->Get('Debug.txt');
      return $Deb->Debug($Var, $Level);
    }
    
    Function _CreateLogger()
    {
      $this->Logger=false;
      return $this->Logger=$this->Get_Singleton('/Log/Manager');
    }
    
    Function GetLogger() { return $this->Logger?? $this->_CreateLogger(); }
    Function Log($LogLevel, ...$Args) { return New T_Log_Item($this, $this->GetLogger(), $LogLevel, $Args); }
    
    //****************************************************************
    Function Done() {} // TODO:
  }

?>