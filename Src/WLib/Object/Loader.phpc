<?
  Class C_Object_Loader
  {
    Var $_Paths =['./Lib/'];
    Var $_Libs  =[];
    Var $_Singleton  =[];
    Var $Included_Files=[]; //< TODO: Remove?
  //Var $LoadingClass='';
    
    Function AddSearchPath($Path)
    {
      if(Is_Array($Path))
      {
        ForEach($Path As $Item)
          $this->AddSearchPath($Item);
        Return;
      }
      $Path=StrTr(RealPath($Path), '\\', '/');
      if(SubStr($Path, -1)=='/')
        $Path=SubStr($Path, 0, -1);
    //if(SubStr($Path, -1)!='/')
    //  $Path.='/';
    //$this->Log('Log', 'AddSearchPath ', $Path);
      $this->_Paths[]=$Path;
    }
 
    Function Loader_Init($APath_Libs)
    {
      $this->_Paths=[];
      $this->AddSearchPath($APath_Libs);
      $this->Load_Class('/Object/Base');
      $this->Load_Type('/Log/Item');
    }
    
    Function _Check_Path($Path)
    {
      $Res=StrTr(RealPath($Path), '\\', '/');
      if($Res!==$Path)
        $this->Log('Error', ' _Find_Lib:',"\n",
          '  Excepted path ', $Res ,"\n",
          '  Actual   path ', $Path
        );
      Return $Res;
    }
    
    Function _Find_Lib(String $Name, String $Ext='')
    {
      If($Name[0]!=='/')
      {
        $this->Log('Error', 'Lib`s name "', $Name, '" should be started with /');
        $Name='/'.$Name;
      }
      ForEach($this->_Paths As $__Path)
      {
        $_Path=$__Path.$Name.$Ext;
        If(!Is_File($_Path)) Continue;
        Return $this->_Check_Path($_Path);
      }
      Return False;
    }
    
    Var $LibTypes=[ // Extension      , Prefix    , Type       ,  Ext
      'Class'     =>['.Class.php'     ,'C'        ,'Class'     ,'.phpc'  ],
      'Interface' =>['.Interface.php' ,'I'        ,'Interface' ,'.phpi'  ],
      'Enum'      =>['.Enum.php'      ,'E'        ,'Enum'      ,'.phpe'  ],
      'Exception' =>['.Exception.php' ,'E'        ,'Exception' ,'.phpe'  ],
      'UnitTest'  =>['.Test.php'      ,'Test'     ,'UnitTest'  ,'.phput' ],
      'Lib'       =>['.Lib.php'       ,''         ,'Lib'       ,'.php'   ],
      'Module'    =>['.Module.php'    ,''         ,'Lib'       ,'.phpm'  ],
      'Trait'     =>['.Trait.php'     ,'Trait'    ,'Trait'     ,'.phpt'  ],
      'Type'      =>['.Type.php'      ,'T'        ,'Type'      ,'.phpt'  ],
      'Struct'    =>['.Struct.php'    ,''         ,'Lib'       ,'.phpt'  ],
    ];
    
    Function _Include($Include_Path, $Include_Vars=[], $Include_Type='Include')
    {
      Extract($Include_Vars);
      Return Match($Include_Type){
        'Require'      =>Require      ($Include_Path),
        'Include'      =>Include      ($Include_Path),
        'Require_Once' =>Require_Once ($Include_Path),
        'Include_Once' =>Include_Once ($Include_Path),
      };
    }
    
    Function _Load_Lib(String $Name, Array $Mode=[], $ArgsId='Lib')
    {
      $Args=$this->LibTypes[$ArgsId];
        
      $Ext    =$Args[3]; //'.php',
      $Prefix =$Args[1]; // '',
      $Type   =$Args[2]; // 'Lib'
      
    //$Name=StrToLower($Name);
      if($Name[0]!=='/')
      {
        $this->Log('Error', 'Lib`s name "', $Name, '" should be started with /');
        $Name='/'.$Name;
      }

    //$LibState=&$this->_Libs[$Type][$Name];//<Remove?
      $LibState=&$this->_Libs[$Name];
      If(!Is_Null($LibState))
      {
        If($LibState!==True)
          Return $LibState;
        Return $this->Log('Error', 'Recursive loading ',$Type, ' ', $Name)->Ret();
      }
      
      $_Path=$this->_Find_Lib($Name, $Ext);
      If($_Path===False && ($Ext2=$Args[0]?? False))
        $_Path=$this->_Find_Lib($Name, $Ext2);
        
      $Res=False;
      If($_Path!==False)
      {
        $LibState=True; // Mark recursive checking
      //$Verify=$this->Verify? $this->_Verify($Type, $TypeName):False;
        If($Res=$this->_Include($_Path, ['Loader'=>$this]))
        {
        //If($Verify) $Verify();
          $TypeName=$Prefix.Str_Replace('/', '_', $Name);
          $this->_Check_Finish($Type, $TypeName);
          $Res=$TypeName;
        }
      }
      
      $LibState=$Res;
      UnSet($LibState);
      If($Res)
        $this->Included_Files[$Name.$Ext]=$_Path;
      Else
      {
        $Safe=$Mode['Safe']?? False;
        If(!$Safe)
          $this->Log('Fatal', 'Can`t load lib ',$Name.$Ext)->Ret();
      }
      Return $Res;
    }
    
    Function _Create_Object($Class_Name, Array $Args=[], Array $Mode=[])
    {
      If(!$Class_Name) Return $Class_Name;
     
    //$Args['Object_Outer'  ]??=$this; //$Args['Outer'  ]??=$this;
      $Args['Object_Loader' ]??=$this; //$Args['Loader' ]??=$this;
      $Res=New $Class_Name($Args);
     #ifdef Debug
     #if(Get_Class($Res)!==$Class_Name)
     #  this->Log('Error', 'Class name error: ', Get_Class($Res), '!==', $Class_Name);
     #endif // Debug
      Return $Res;
    }
    
    Function Create_Object($Name, Array $Args=[], Array $Mode=[])
    {
      $Class_Name=$this->Load_Class($Name, $Mode);
      Return $this->_Create_Object($Class_Name, $Args, $Mode);
    }
    
    Function Create_UnitTest($Name, Array $Args=[], Array $Mode=[])
    {
      $Class_Name=$this->Load_UnitTest($Name, $Mode);
      Return $this->_Create_Object($Class_Name, $Args, $Mode);
    }
    
    Function Get_Singleton($Name, Array $Args=[], Array $Mode=[])
    {
      $Key=Count($Args)? $Name.Serialize($Args):$Name;
      $S=&$this->_Singleton;
    //this->Log('Log', 'GetSinlgeton(', $Key ,')[', Implode(', ', Array_Keys($S)), ']');
      if(IsSet($S[$Key]))
        $Res=$S[$Key];
      else
        $Res=$S[$Key]=$this->Create_Object($Name, $Args, $Mode);
      return $Res;
    }
 
    Function Object($Name, Array $Args=[], Array $Mode=[])
    {
      throw new Exception('Not implemented');
      //see: D:\MyWeb\_files\wlib\system\loader.phpc
      // This is creating singleton from System/Singleton/
    }
    
    Function Load_Lib       ($Name, Array $Mode=[]) { Return $this->_Load_Lib($Name, $Mode, 'Lib'       ); }
    Function Load_Module    ($Name, Array $Mode=[]) { Return $this->_Load_Lib($Name, $Mode, 'Module'    ); } // TODO: Rename lib
    Function Load_Type      ($Name, Array $Mode=[]) { Return $this->_Load_Lib($Name, $Mode, 'Type'      ); } // TODO: Rename struct
    Function Load_Struct    ($Name, Array $Mode=[]) { Return $this->_Load_Lib($Name, $Mode, 'Struct'    ); } // TODO: Rename struct
    Function Load_Class     ($Name, Array $Mode=[]) { Return $this->_Load_Lib($Name ,$Mode ,'Class'     ); }
    Function Load_Interface ($Name, Array $Mode=[]) { Return $this->_Load_Lib($Name ,$Mode ,'Interface' ); }
    Function Load_Trait     ($Name, Array $Mode=[]) { Return $this->_Load_Lib($Name ,$Mode ,'Trait'     ); }
    Function Load_Enum      ($Name, Array $Mode=[]) { Return $this->_Load_Lib($Name ,$Mode ,'Enum'      ); }
    Function Load_Exception ($Name, Array $Mode=[]) { Return $this->_Load_Lib($Name ,$Mode ,'Exception' ); }
    Function Load_UnitTest  ($Name, Array $Mode=[]) { Return $this->_Load_Lib($Name ,$Mode ,'UnitTest'  ); }
 
    Function Using_Class     ($Name) {}
    Function Using_Interface ($Name) { $this->Load_Interface ($Name); }
    Function Using_Module    ($Name) { $this->Load_Module    ($Name); } // TODO: Rename lib
    Function Using_Type      ($Name) { $this->Load_Type      ($Name); } // TODO: Rename struct
    Function Using_Struct    ($Name) { $this->Load_Struct    ($Name); } // TODO: Rename struct
    
    Function Class_Implements ($Name) { $this->Load_Interface ($Name); }
    Function Class_Extends    ($Name) { $this->Load_Class     ($Name); }
    Function Parent_Class     ($Name) { $this->Load_Class     ($Name); }
    Function Parent_Struct    ($Name) { $this->Load_Struct    ($Name); }
    
    Function Begin_Module () {}
    Function Begin_Class  () {}
    Function Begin_Type   () {}
    Function Begin_Lib    () {}
    
    Function End_Module () {}
    Function End_Class  () {}
    Function End_Type   () {}
    Function End_Lib    () {}

    //****************************************************************
    // Check
    
    Function _Check_Finish($Type, $TypeName)
    {
      Switch($Type)
      {
      Case 'Lib'       : Return;
      Case 'Class'     : $z=     Class_Exists($TypeName); Break;
      Case 'Interface' : $z= Interface_Exists($TypeName); Break;
      Case 'Trait'     : $z=     Trait_Exists($TypeName); Break;
      Case 'Enum'      : $z=      Enum_Exists($TypeName); Break;
      Case 'Exception' : $z=     Class_Exists($TypeName); Break;
      Case 'UnitTest'  : $z=     Class_Exists($TypeName); Break;
      Case 'Type'      : $z=     Class_Exists($TypeName); Break;
      Default: Return $this->Log('Fatal', 'Unreachable place '.$Type)->Ret();
      }
      
      If(!$z) Return $this->Log('Error', $Type, ' ', $TypeName, ' not found')->Ret();
      
      $Class=New ReflectionClass($TypeName);
      $RealName=$Class->GetName();
      If($TypeName!==$RealName)
        $this->Log('Error', $Type, ' name error: ', $TypeName, ' in not same ', $RealName);
    }
    
    //****************************************************************
    // Old Verify functional
    
    Var $Verify=True;
    
    Function _Verify($Type, $TypeName)
    {
      $Var=$this->_Verify_Begin($Type);
      Return fn()=>$this->_Verify_End($Type, $Var, $TypeName);
    }

    Function _Verify_Begin($Type): Int
    {
      Switch($Type)
      {
      Case 'Lib'       : Return 0;
      Case 'Class'     : Return Count(Get_Declared_Classes    ());
      Case 'Interface' : Return Count(Get_Declared_Interfaces ());
      Case 'Trait'     : Return Count(Get_Declared_Trait      ());
      Case 'Enum'      : Return Count(Get_Declared_Classes    ());
      Case 'Exception' : Return Count(Get_Declared_Classes    ());
      Case 'UnitTest'  : Return Count(Get_Declared_Classes    ());
      }
      $this->Log('Fatal', 'Unreachable place '.$Type);
    }
    
    Function _Verify_End($Type, Int $Start, String $TypeName)
    {
      Switch($Type)
      {
      Case 'Lib'       : Return;
      Case 'Class'     : $List=Get_Declared_Classes    (); Break;
      Case 'Interface' : $List=Get_Declared_Interfaces (); Break;
      Case 'Trait'     : $List=Get_Declared_Traits     (); Break;
      Case 'Enum'      : $List=Get_Declared_Classes    (); Break;
      Case 'Exception' : $List=Get_Declared_Classes    (); Break;
      Case 'UnitTest'  : $List=Get_Declared_Classes    (); Break;
      }
      $c=Count($List);
      for($i=$Start; $i<$c; $i++)
        if($List[$i]===$TypeName)
          return true;
      for($i=$Start; $i<$c; $i++)
        if(StrCaseCmp($List[$i], $TypeName)===0)
        {
          $this->Log('Error', $Type, ' name error: ', $TypeName, ' in not same ', $List[$i]);
          return true;
        }
      $this->Log('Error', $Type, ' ', $TypeName, ' not found');
    }

    //****************************************************************
    // Debug And Log
    
    Var $Logger=null;
    
    Function Debug($Var, $Level=-1) // TODO: Return Debug object
    {
      $Deb=$this->Get_Singleton('/Debug/Manager')->Get('Debug.txt');
      return $Deb->Debug($Var, $Level);
    }
    
    Function _CreateLogger()
    {
      $this->Logger=false;
      return $this->Logger=$this->Get_Singleton('/Log/Manager');
    }
    
    Function GetLogger() { return $this->Logger?? $this->_CreateLogger(); }
    Function Log($LogLevel, ...$Args) { return New T_Log_Item($this, $this->GetLogger(), $LogLevel, $Args); }

    Function ToDebugInfo() { return $this->_ToDebugInfo(); }
    Function _ToDebugInfo() { return 'Loader'; }
    
    //****************************************************************
    Function Done() {} // TODO:
  }

?>