<?
  $this->Parent_Class('/Object');

  Use T_RegExp_Node_Base_Base As Node;
  
  Class C_RegExp_Node_Validator Extends C_Object
  {
    Var $Stack=[];
  
    Function Node(Node $Node)
    {
      $this->Stack[]=$Node;
      $Res=$Node->Validate($this);
      $Check=Array_Pop($this->Stack);
      If($Check!==$Node)
        $this->Log('Error', 'Node stack was rused')->BackTrace();
      If(!$Res)
        $this->Log('Error', 'Node is not valid')->Debug($Node);
      Return $Res;
    }

    Function NodeStr($Node) //String|Node
    {
      Switch(GetType($Node))
      {
      Case 'string': Return True; //TODO:
      Case 'object': Return $this->Node($Node);
      }
      $this->Error('Unsupported node type: ', GetType($Node))
        ->Debug(['Node'=>$Node, 'Stack'=>Array_Reverse($this->Stack)])
        ->BackTrace();
      Return False;
    }
    
  //****************************************************************
  // Char
    
    Function Char8(String|Int $v)
    {
      Switch(GetType($v))
      {
      Case 'string'  : Return StrLen($v)===1;
      Case 'integer' : Return $v>=0 && $v<0x100;
      Default: Return False;
      }
    }
    
    Function Char(String|Int $v)
    {
      Switch(GetType($v))
      { //TODO: Utf8
      Case 'string'  :
        //TODO: Workaround
        If(StrLen($v)===1 && $v!=='\\') Return True;
        If(StrLen($v)===2 && $v[1]!=='\\' && Str_Starts_With($v, '\\')) Return True;
        If(True) Return True;
        Return False;
      Case 'integer' : Return $v>=0 && $v<0x100;
      Default: Return False;
      }
    }
    
    Function Chars(Object|String|Int $v)
    {
      Switch(GetType($v))
      { //TODO: Utf8
      Case 'object'  : Return $v InstanceOf T_RegExp_Node_Char_Base;
      Case 'string'  : Return StrLen($v)===1;
      Case 'integer' : Return $v>=0 && $v<0x100;
      Default: Return False;
      }
    }
    
    Function CharToInt(String|Int $v)
    {
      Switch(GetType($v))
      { //TODO: Utf8
      Case 'string'  : Return Ord($v);
      Case 'integer' : Return $v;
      Default: Return 0;
      }
    }
    
  //****************************************************************
  
    Function Error( ...$Args)
    {
      Return $this->Log('Error', ...$Args);
    }
  }