<?
  $this->Parent_Class('/Object');

  Use T_RegExp_Node_Base_Base As Node;
  
  Class C_RegExp_Node_Validator Extends C_Object
  {
    Function Node(Node $Node)
    {
      Return $Node->Validate($this);
    }

    Function NodeStr(String|Node $Node)
    {
      Switch(GetType($Node))
      {
      Case 'string': Return True; //TODO:
      Case 'object': Return $this->Node($Node);
      }
      $this->Error('Unsupported node type: ', GetType($Node))->Debug($Node);
      Return False;
    }
    
  //****************************************************************
  // Char
    
    Function Char8(String|Int $v)
    {
      Switch(GetType($v))
      {
      Case 'string'  : Return StrLen($v)===1;
      Case 'integer' : Return $v>=0 && $v<0x100;
      Default: Return False;
      }
    }
    
    Function Char(String|Int $v)
    {
      Switch(GetType($v))
      { //TODO: Utf8
      Case 'string'  : Return StrLen($v)===1;
      Case 'integer' : Return $v>=0 && $v<0x100;
      Default: Return False;
      }
    }
    
    Function Chars(Object|String|Int $v)
    {
      Switch(GetType($v))
      { //TODO: Utf8
      Case 'object'  : Return $v InstanceOf T_RegExp_Node_Char_Base;
      Case 'string'  : Return StrLen($v)===1;
      Case 'integer' : Return $v>=0 && $v<0x100;
      Default: Return False;
      }
    }
    
    Function CharToInt(String|Int $v)
    {
      Switch(GetType($v))
      { //TODO: Utf8
      Case 'string'  : Return Ord($v);
      Case 'integer' : Return $v;
      Default: Return 0;
      }
    }
    
  //****************************************************************
  
    Function Error( ...$Args)
    {
      Return $this->Log('Error', ...$Args);
    }
  }