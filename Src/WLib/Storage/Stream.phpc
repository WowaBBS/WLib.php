<?
  $this->Parent_Class('/Storage/Serialize');
  $this->Load_Lib('/Stream/Utils'); // omRead|omWrite|omMakePath|omCreate|omBinary

  class C_Storage_Stream extends C_Storage_Serialize
  {
    Var $Stream      = null;
  # Var $Backup      = null; // TODO:
    Var $LastModInfo = 'Uninited';
    Var $State       = 'Closed';

    Function _Init(Array $Args)
    {
      $Stream=$Args['Stream']??$Args[0];
    # $Backup=$Args['Backup']??False;
      Parent::_Init($Args);
      $OpenMode=omRead|omWrite|omMakePath|omCreate|omBinary;//|omShareable; // TODO; Bug TestW.php7
      if(Is_String($Stream))
      {
        $Stream=$this->Create_Object('/Stream/File', [
          'FileName'=>$Stream   ,
          'OpenMode'=>$OpenMode ,
        ]);
      # $Backup=$this->Create_Object('/Stream/File', [
      #   'FileName'=>$Stream   .'.backup',
      #   'OpenMode'=>$OpenMode ,
      # ]);
      }
      $this->Stream=$Stream;
    # $this->Backup=$Backup;
      $this->_SetState('Opened');
    }
    
    Function _CheckState($State)
    {
      if($this->State!==$State)
        $this->Log('Error', 'State ', $this->State, ' is wrong, should be state ', $State);
    }
    
    Function _SetState($State)
    {
      static $States=[
         'Closed' =>'Opened',
         'Read'   =>'Opened',
         'Write'  =>'Opened',
         'Opened' =>'',
      ];
      $Check=$States[$State]?? False;
      if($Check===false)
        return $this->Log('Error', 'State ', $this->State, ' is not allowed');
      if($Check!=='')
        $this->_CheckState($Check);
      $this->State=$State;
    }
     
    Function _Done()
    {
      $this->_SetState('Closed');
      $Stream=$this->Stream;
      $Stream->Close();
      $Stream->Done();
      $this->Stream=null;
      Parent::_Done();
    }
  
    Protected Function _Get(bool $UnLock, $Default=[])
    {
      $this->LastModInfo=$this->GetModInfo();
    # $Res=$this->Backup->Get_Content();
    # if(StrLen($Res)>0)
        $Res=$this->Stream->Get_Content();
      if($UnLock)
        $this->Stream->UnLock();
      if(!(StrLen($Res)>0))
        $this->_SetDefault($Default);
      else
        $this->_Deserialize($Res);
      return $this->Vars;
    }
    
    Function Get($Default=[])
    {
      if($this->State==='Write')
        return $this->Vars;
      $this->_CheckState('Opened');
      if(!$this->IsChanged())
        return $this->Vars;
      $this->Stream->LockRead();
      $Res=$this->_Get(true, $Default);
      return $Res;
    }
    
    Function GetModInfo()
    {
      $Stream=$this->Stream;
      $Res=$Stream->Stat();
      $Res=$Res['mtime'].'_'.$Res['size'];
      return $Res;
    }
    
    Function IsChanged()
    {
      return $this->LastModInfo!=$this->GetModInfo();
    }

    Function BeginUpdate($Default=[])
    {
      $this->_SetState('Write');
      $this->Stream->LockWrite();
      if(!$this->IsChanged())
        $Res=$this->Vars;
      else
        $Res=$this->_Get(false, $Default);
      return $Res;
    }

    Function EndUpdate($Vars)
    {
      $this->_CheckState('Write');
      $Stream=$this->Stream;
      $Res=$this->_Serialize($Vars);
    # $Backup->Put_Content($Res);
      $Stream->Put_Content($Res);
      $this->LastModInfo =$this->GetModInfo();
      $Stream->Flush();
      $Stream->UnLock();
      $this->_SetState('Opened');
    }

    Function CancelUpdate()
    {
      $this->_CheckState('Write');
      $Stream->UnLock();
      $this->_SetState('Opened');
    }
    
  # Function Remove()
  # {
  # }
  }
?>