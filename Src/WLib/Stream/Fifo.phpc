<?
  $Loader->Parent_Class('/Stream/Base');

  Class C_Stream_Fifo Extends C_Stream_Base
  {
    Var $FBuffer=[];
    Var $FLength=0;
    Var $FPos=0;
  
    Function Recv_Count()
    {
      Return $this->FLength;
    }
  
    Function Localize()
    {
      $B=&$this->FBuffer;
      $Res=[];
      ForEach($B As $k=>$tmp)
        If(Is_Object($tmp))
        {
          $S=$B[$k]->Get_Contents(); //!!!!!! „итает все данные, а не оставшиес€
          If(StrLen($S))
            $Res[]=$S;
          $B[$k]->_UnLock();
        }
        Else
          $Res[]=$tmp;
      $B=$Res;
    }
  
    Function Eof()
    {
    //Return $this->FLength==0;
      Return Count($this->FBuffer)==0;
    }
  
    Function Clear()
    {
      $B=&$this->FBuffer;
      ForEach($B As $k=>$tmp)
        If(Is_Object($tmp))
          $B[$k]->_UnLock();
      $B=[];
      $this->FLength=0;
      $this->FPos=0;
    }
  
    Function PreView($ASize)
    {
      $Res=$this->Read($ASize);
      If($this->FPos>=$ASize)
        $this->FPos-=$ASize;
      Else
        $this->Write_Back($Res);
      Return $Res;
    }
  
    Function Recv($ASize)
    {
      $_Buffer=&$this->FBuffer;
      If(!$_Buffer)
        Return '';
      If(Is_String($_Buffer[0]))
      {
        // ≈сли можем считать все данные из первой строки, то считываем
        If(StrLen($_Buffer[0])-$this->FPos<=$ASize)
        {
          $Res=Array_Shift($_Buffer);
          If($this->FPos)
          {
            $Res=SubStr($Res, $this->FPos);
            $this->FPos=0;
          }
          $this->FLength-=StrLen($Res);
          Return $Res;
        }
        $Res=SubStr($_Buffer[0], $this->FPos, $ASize);
        $this->FPos+=$ASize;
        $this->FLength-=$ASize;
        Return $Res;
      }
      Else
      {
        $Res=$_Buffer[0]->Read($ASize);
        $Len=StrLen($Res);
        If($Len==0)
        {
          $_Buffer[0]->_UnLock();
          Array_Shift($_Buffer);
          //$this->FLength-=1;
        }
        Else
          $this->FLength-=StrLen($Res);
        Return $Res;
      }
    }
  
    Function Write($Data)
    {
      $L=StrLen($Data);
      If(!$L)
        Return 0;
      $this->FLength+=$L;
      $this->FBuffer[]=$Data;
      Return $L;
    }
  
    Function Stream_Add(&$AStream)
    {
    //$this->FLength+=$AStream->Recv_Count();
      $this->FLength+=$AStream->Recv_Count();
      $this->FBuffer[]=&$AStream->_Lock();
    }
  
    Function _Go_Back_Str($ASize, $AData, $APos=0)
    {
      If($this->FPos)
      {
        $Seek=Min($this->FPos, $ASize);
        $this->FPos-=$Seek;
        $ASize-=$Seek;
        $this->FLength+=$Seek;
        If(!$ASize)
          Return $Seek;
        $AData=SubStr($AData, $APos, $ASize);
      }
      Else
      {
        $Seek=0;
        If($APos)
          $AData=SubStr($AData, $APos);
      }
      $this->FLength+=$ASize;
      Array_UnShift($this->FBuffer, $AData);
      Return $Seek+$ASize;
    }
  
    Function Write_Back($Data)
    {
      If((String)$Data==='')
        Return 0;
      If($this->FPos)
        $this->FBuffer[0]=SubStr($this->FBuffer[0], $this->FPos);
      $L=StrLen($Data);
      $this->FLength+=$L;
      Array_UnShift($this->FBuffer, $Data);
      Return $L;
    }
  
    Function Close()
    {
    }
  }
?>