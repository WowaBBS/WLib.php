<?
  $Loader->Parent_Class('/Stream/Base');

  Class C_Stream_Handle Extends C_Stream_Base
  {
    Var $FHandle=Null;
    Var $HasNoHandleError=Null;
  
    Function _Init(Array $Args)
    {
      Parent::_Init($Args);
      $this->FHandle=$Args['Handle']?? False;
    }
    
    Function CheckHandle($NoError=False)
    {
      if($this->FHandle)
        return True;
      if(!($this->HasNoHandleError?? $NoError))
      {
        $this->HasNoHandleError=True;
        $this->Log('Error', 'No handle')->BackTrace();
      }
      return False;
    }
    
    Function Close()
    {
      If($this->FHandle)
      {
        FClose($this->FHandle);
        $this->FHandle=Null;
      }
    }
  
    Function Stat()
    {
      Return FStat($this->FHandle);
    }
  
    Function Recv($Size)
    {
      if($Size<=0)
        Return $this->Log('Error', 'Size<=0')->BackTrace()->Ret('');
      Return FRead($this->FHandle, $Size);
    }
  
    Function Get_Line($Size=1024)
    {
      $fp=$this->FHandle;
      $Res='';
      Do
      {
        $Out=@FRead($fp, 1);
        If($Out===False)
          Return StrLen($Res)? $Res:False;
      //If($Out==="\r")
      //   Continue;
        If($Out==="\n")
           Break;
        $Res.=$Out;
      }
      While(!FEof($fp));
      if(($l=StrLen($Res)) && $Res[$l-1]==="\r")
        $Res=SubStr($Res, 0, -1);
      Return $Res;
    }
  
    Function Eof() // TODO: For file Recv_Count()>0
    {
      Return FEof($this->FHandle);
    }
  
    Function Write($Data)
    {
      if(!Is_String($Data) && !Is_Int($Data))
      {
        $this->Log('Error', 'Unsupported type ', GetType($Data))->BackTrace();
        return 0;
      }
      if(!$this->CheckHandle())
        return 0;
      Return FWrite($this->FHandle, $Data);
    }
  
  //Function PassThru() { FPassThru($this->FHandle); } // TODO: Why?
  
    Function Flush()
    {
      if($this->FHandle)
        FFlush($this->FHandle);
    }
  }
?>