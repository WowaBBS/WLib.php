<?  // Taken from builder of UE, directory Builder/Lib/Cache    $Loader->Parent_Class('/Object');  $Loader->Load_Lib('/FS/Utils');    ///   Class C_Cache_List extends C_Object  {    Var $Content           = [];    Var $FilePath          = 'Cache/SomeCache.php';    Var $IsLoaded          = false ;    Var $IsChanged         = false ;    Var $LoadOnInit        = false ;    Var $MarkDirtyOnLoad   = true  ;    Var $RemoveDirtyOnDone = true  ;    Var $SortByKey         = true  ;        Function Init()    {      if($this->LoadOnInit)        $this->Load();    }        Function Done()    {      If($this->RemoveDirtyOnDone)        $this->RemoveDirty();      If($this->IsChanged)        $this->Save();      $this->Content  =[];      $this->IsLoaded =false ;    }     Function Load()    {      if(FS_Is_File($this->FilePath))      {        $this->Content=Include(FS_EnCode($this->FilePath));        $this->IsChanged=False;        if($this->MarkDirtyOnLoad)          $this->MarkDirty();      }      else      {        $this->Content=[];        $this->IsChanged=True;      }      $this->IsLoaded=true;    }        Function Save()    {      if($this->SortByKey)        KSort($this->Content);      $Data=''        .'<?'."\n"        .'Return'."\n"        .var_export($this->Content, true).";\n"        .'?>'      ;      CreatePath(GetDirPath($this->FilePath));      FS_File_Put_Contents($this->FilePath, $Data);      $this->IsChanged=false;    }        Function Check($Key)    {      if(!$this->IsLoaded)        $this->Load();      if(IsSet($this->Content[$Key]))        UnSet($this->Content[$Key]['Dirty']);    }        Function Get($Key, $Hash, $Getter)    {      if(!$this->IsLoaded)        $this->Load();      if(IsSet($this->Content[$Key]))      {        $Res=$this->Content[$Key];        if(IsSet($Res['Dirty']))          UnSet($Res['Dirty']);        if($Res['Hash']===$Hash)          return $Res['Data'];      }      $Data=$Getter();      $Res=[        'Hash'=>$Hash,        'Data'=>$Data,      ];      $this->IsChanged=true;      $this->Content[$Key]=$Res;      return $Data;    }     Function MarkDirty()    {      ForEach($this->Content As &$Item)        $Item['Dirty']=true;    }        Function RemoveDirty()    {      $Content=&$this->Content;      $IsChanged=false;      ForEach($Content As $k=>$Item)        if(IsSet($Item['Dirty']))        {          UnSet($Content[$k]);          $IsChanged=true;        }      if($IsChanged)        $this->IsChanged=true;    }  }?>