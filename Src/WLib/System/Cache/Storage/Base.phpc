<?
  $Loader->Parent_Class('/Object');
  ///
  Class C_System_Cache_Storage_Base Extends C_Object
  {
   Var $Path     ;
   Var $Info     =[];
   Var $Manager  ;
   Var $IsLoaded =False;
 
   Function _Init(Array $Args)
   {
     parent::_Init($Args);
     $this->Manager=$Args['Manager'];
     $this->Path=New TPath($Args['Path']);
     $Res=[];
     ForEach($this->Path->Path As $i=>$v)
       If(!$i||($v!=='')&&($v!=='.'))
         //$Res[]=$v;
         $Res[]=Preg_Replace('/:/','', $v);
     $this->Path->Path=$Res;
   }
 
   Function Get_Field($Field, $Type='user')
   {
     $Args=[
       'CVars' => $this  ,
       'Field' => $Field ,
       'Type'  => $Type  ,
     ];
     $Res=$this->Create_Object('/System/Cache/Vars/Field', $Args);
     Return $Res;
   }
 
   Function _Load()
   {
     FAbstract();
     Return False;
   }
 
   Function _Save()
   {
     FAbstract();
     Return False;
   }
 
   Function File_Alloc($ID)
   {
     $I=&$this->Info;
     If(!$I)
       $this->_Load();
     If(!IsSet($I[' files']))
       $I[' files']=[
         'ByID'=>Array(),
         'Idx'=>0,
       ];
     $I=&$I[' files'];
     If(IsSet($I['ByID'][$ID]))
       Return $ID;
     $Dir=$this->Path->Make();
     If(!Is_Dir($Dir))
       If(!CreatePath($Dir, $this->Manager->Vars['MkDir']['Mod']))
         Return False;
     $I['ByID'][$ID]=$I['Idx']++;
     Return $ID;
   }
 
   Function File_Delete($ID)
   {
   }
 
   Function File_Path($ID)
   {
     $I=&$this->Info;
     If(!$I)
       $this->_Load();
     If(!IsSet($I[' files']))
       Return False;
     $I=&$I[' files'];
     If(!IsSet($I['ByID'][$ID]))
       Return False;
     Return $this->Path->Make().'/'.$I['ByID'][$ID];
   }
 
   Function Proc_Create($ProcName, $Args, $EvalData)
   {
     $I=&$this->Info;
     If(!$I)
       $this->_Load();
     If(!IsSet($I[' procs']))
       $I[' procs']=[
       ];
     $I=&$I[' procs'];
     $I[$ProcName]=[
       $Args     ,
       $EvalData ,
     ];
   }
 
   Function Proc_Get($ProcName)
   {
     $I=&$this->Info;
     If(!$I)
       $this->_Load();
     If(!IsSet($I[' procs']))
       Return False;
     $I=&$I[' procs'];
     If(!IsSet($I[$ProcName]))
       Return False;
     $p=$I[$ProcName];
     Return Create_Function($p[0], $p[1]);
   }
  }
?>