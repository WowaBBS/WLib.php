<?
  $Loader->Parent_Class('/Object');

  class C_System_Env extends C_Object
  {
    Var $Map;
    
    Function _Init(Array $Args)
    {
      parent::_Init($Args);
      $this->Clear();
    }
   
    function Clear()
    {
      $this->Map=[];
    }
    
    function Minus(C_System_Env $Env)
    {
      $Res=&$this->Map;
      $Remove=[];
      $Removed=[];
      ForEach($Env->Map as $k=>$v2)
        if(IsSet($Res[$k]))
        {
          $v1=&$Res[$k];
          $z1=is_array($v1);
          $z2=is_array($v1);
          $z=$z1 || $z2;
          if($z1!=$z2)
            if($z1)
              $v2=[$v2];
            else
              $v1=[$v1];
          if($z)
          {
            $v1=Array_Diff($v1, $v2);
            if(count($v1))
              $v1=Array_Values($v1);
            else
              $Remove[]=$k;
          }
          else
          {
            if($v1==$v2)
              $Remove[]=$k;
          }
        }
        else
          $Removed[]=$k;
      // Check removed keys
      if(Count($Removed))
        $Res[' Removed']=$Removed;

      ForEach($Remove as $k)
        Unset($Res[$k]);
    }
    
    function LoadCurrent()
    {
      // TODO Windows only,
      $TmpFile='CurrentEnv.txt';
      exec('set >'.$TmpFile);
      $this->LoadFile($TmpFile);
      Unlink($TmpFile);
    }
  
    function LoadFile($FileName)
    {
      $Res=File_Get_Contents($FileName);
      $this->Parse($Res);
    }
    
    function Parse($Text)
    {
      $Res=&$this->Map;
      $Text=explode("\r\n", $Text);
      ForEach($Text as $Line)
      {
        if(StrLen($Line)==0)
          continue;
        $Line2=explode('=', $Line, 2);
        if(count($Line2)!=2)
        {
          echo '[Error]', $Line, "\n";
          continue;
        }
        $Vals=explode(';', $Line2[1]);
        if(count($Vals)==1)
          $Vals=$Vals[0];
        $Res[$Line2[0]]=$Vals;
      }
    }
  };

?>