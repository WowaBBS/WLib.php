<?
  $Loader->Parent_Class('/Object');

  class T_System_Env_Item
  {
    const Type_Remove =0;
    const Type_Set    =1;
    const Type_Merge  =2;
  
    Protected $Outer =null ;
    Protected $Key   =''   ;
    Protected $Name  =''   ;
    Protected $Type  =1    ; // 'Set', 'Remove', 'Merge'
    Protected $Value =''   ;
    
    Function __Construct(C_System_Env $Outer, String $Key, String $Name, $Value='', $Type=1)
    {
      $this->Outer =$Outer ;
      $this->Key   =$Key   ;
      $this->Name  =$Name  ;
      $this->Set($Value, $Type);
      $Outer->_SetItem($this);
    }
    
    Function GetKey() { return $this->Key; }
    Function GetName() { return $this->Name; }
    
    Function ToString() { $v=$this->Value; return Is_Array($v)? Implode(';', $v):(String)$v; }
    Function ToArray() { return (Array)$this->Value; }
    Function GetValue() { return $this->Value; }
    
    Function Set($Value, $Type=1)
    {
    //echo $Value;
      switch($Type)
      {
      case 0: return $this->SetRemove();
      case 1: break;
      case 2: return $this->SetMerge($Value);
      default: $this->Log('Fatal', 'Unreachable place');
      }
      
      switch(GetType($Value))
      {
      case 'NULL'   : return $this->SetRemove();
      case 'string' : $Value=Str_Replace(["\n", "\r"], '', $Value);  $Value=Explode(';', $Value);
      case 'array'  : return $this->_Set(count($Value)===1? $Value[0]: $Value, 1);
      default: $this->Log('Error', '\System\Env: Unsupported type ', GetType($Value));
      }
    }
    
    Function _Set($Value, $Type)
    {
      if($this->Value ===$Value &&
         $this->Type  ===$Type  )
        return; 
      $this->Value =$Value ;
      $this->Type  =$Type  ;
      $this->Outer ->OnChanged($this);
    }
    
    Function Remove() { return $this->Outer->_Remove($this->GetKey()); }
    Function SetRemove() { return $this->_Set(false, 0); }
    Function SetMerge(Array $Value)
    {
      if(count($Value)!=2)
        UnSupported();
      $this->_Set($Value, 2);
    }
    
    Function IsRemove () { return $this->Type===0; }
    Function IsSet    () { return $this->Type===1; }
    Function IsMerge  () { return $this->Type===2; }
    Function IsNone   () { return $this->Type===2 && $this->_IsNone(); }
    Function _IsNone  () { return $this->Value===['', '']; }
    
    Function CanCompare()
    {
      switch($this->Type)
      {
      case 0: return false;
      case 1: return true;
      case 2: if($this->_IsNone()) return true;
      }
      UnSupported();
      return false;
    }

    function Minus(T_System_Env_Item $Item)
    {
      if(!$this->CanCompare()) return;
      if(!$Item->CanCompare()) return;
      $v1=$this->ToString();
      $v2=$Item->ToString();
      $l2=StrLen($v2);
      if($l2>StrLen($v1)) return $this->SetRemove();
      if($v1===$v2)        return $this->Remove();
      if(SubStr($v1, 0, $l2+1)===$v2.';') return $this->SetMerge(['', SubStr($v1,     $l2)    ]);
      if(SubStr($v1,   -$l2-1)===';'.$v2) return $this->SetMerge([    SubStr($v1, 0, -$l2), '']);
      $S=Explode(';'.$v2.';', $v1);
      if(Count($S)==2)
        return $this->SetMerge([$S[0].';', ';'.$S[1]]);
      // Default: Override
    }
    
    Function __toString() { return $this->ToString(); }
    
    Function OnRemove() { $this->Outer=null; }

    Function ToCmd()
    {
      switch($this->Type)
      {
      case 0: return 'set '.$this->Name.'=';
      case 1: return 'set '.$this->Name.'='.$this; // TODO: Check symbols
      case 2: if($this->_IsNone()) return 'rem No change '.$this->Name;
              return 'set '.$this->Name.'='.$this->Value[0].'%'.$this->Name.'%'.$this->Value[1]; // TODO: Check symbols
      }
      UnSupported();
    }
    
    Function _Debug_Serialize(&$Res)
    {
      UnSet($Res["Outer" ]);
      switch($this->Type)
      {
      case 0: 
      case 1: 
      case 2:
        UnSet($Res["Name"  ]);
        UnSet($Res["Type"  ]);
        UnSet($Res["Value" ]);
        if($Res)
          $Res[]=$this->ToCmd();
        else
          $Res=$this->ToCmd();
      }
    }
  }
  
  class C_System_Env extends C_Object implements ArrayAccess
  {
    Protected $Map=[];
    
    //****************************************************************
    // Magic methods

    Function __Get   (String $k)     { return $this->Get($k);        }
    Function __IsSet (String $k)     { return $this->Has($k);        }
    Function __Set   (String $k, $v) {        $this->Set($k, $v);    }
    Function __UnSet (String $k)     {        $this->Set($k, false); }
 
    //****************************************************************
    // ArrayAccess interface

    Public Function offsetExists     ($k):bool { return $this->Get($k);        }
    Public Function offsetGet        ($k)      { return $this->Has($k);        }
    Public Function offsetSet        ($k ,$v)  {        $this->Set($k, $v);    }
    Public Function offsetUnset      ($k)      {        $this->Set($k, false); }
    
    //****************************************************************
    
    Function _Init(Array $Args)
    {
      parent::_Init($Args);
      if($Map=$Args[0]??$Args['Map']??[])
        $this->Assign($Map);
    }
    
    Function Add_Array(Array $Map)
    {
      ForEach($Map As $Name=>$Value)
        $this->Set($Name, $Value);
    }
    
    Function Assign($Map)
    {
      $this->Clear();
      switch(GetType($Map))
      {
      case 'array': return $this->Add_Array($Map);
      Default: UnSupported();
      }
    }
    
    Function OnChanged(T_System_Env_Item $Item)
    {
      // TODO:
    }
   
    function Clear()
    {
      ForEach($this->Map As $Item)
        $Item->OnRemove();
      $this->Map=[];
    }
    
    Function _Remove(String $Key)
    {
      if($Old=$this->Map[$Key]??null)
        $Old->OnRemove();
      UnSet($this->Map[$Key]);
    }
    
    Function _SetItem(T_System_Env_Item $Item)
    {
      $Key=$Item->GetKey();
      if($Old=$this->Map[$Key]??null)
        $Old->OnRemove();
      $this->Map[$Key]=$Item;
    }
    
    Function Has($Name)
    {
      $Item=$this->Map[$Name]??false;
      return $Item && !$Item->IsRemove();
    }
    
    Function _ToKey($Name) { return StrToLower($Name); }
    
    Function Get($Name)
    {
      $Key=$this->_ToKey($Name);
      return $this->Map[$Key] ??
        New T_System_Env_Item($this, $Key, $Name, ['', ''], 2);
    }
    
    Function Set($Name, $Value=null, $Type=1)
    {
      if($Value===false)
        UnSet($this->Map[$this->_ToKey($Name)]);
      else
        $this->Get($Name)->Set($Value, $Type);
    }
    
    Function SetRemove($Name) { $this->Set($Name, null); }
    Function Remove($Name) { $this->Set($Name, false); }
    
    function Minus(C_System_Env $Env)
    {
      ForEach($Env->Map as $Item)
        $this->Get($Item->GetName())->Minus($Item);
    }
    
    function LoadCurrent()
    { // TODO Windows only,
      $Output=[]; $Return=0;
      $ErrCode=exec('set', $Output, $Return);
      $this->Parse_Array($Output);
    }
  
    Function LoadFile($FileName)
    {
      $this->Parse_String(File_Get_Contents($FileName));
    }
    
    Function Parse_String(String $Text)
    {
      $this->Parse_Array(Explode("\r\n", $Text));
    }
    
    Function Parse_Array(Array $List)
    {
      ForEach($List as $Line)
      {
        if(StrLen($Line)==0)
          continue;
        $Line2=explode('=', $Line, 2);
        if(count($Line2)!=2)
        {
          $this->Log('Error', 'Env::Parse::Line=', $Line);
          continue;
        }
        // TODO: Check Override
        $this->Set($Line2[0], $Line2[1]);
      }
    }
    
    Function ToCmd()
    {
      $Res=[];
      ForEach($this->Map As $Item)
        $Res[]=$Item->ToCmd();
      return Implode("\n", $Res);
    }
    
    Function GetMap()
    {
      $Res=[];
      ForEach($this->Map As $Item)
        $Res[$Item->GetName()]=$Item->GetValue();
      return $Res;
    }
  };

?>