<?
  //https://en.wikipedia.org/wiki/Universally_unique_identifier
  //https://ru.wikipedia.org/wiki/UUID
  //https://github.com/Fleshgrinder/php-uuid/blob/php-7.1/src/UUID.php
  //https://github.com/oittaa/uuid-php/blob/master/src/UUID.php
  //https://habr.com/ru/companies/vk/articles/522094/
  
  $Loader->Load_Class('/Object');
  $Loader->Load_Enum('/URI/UUID/Family');
  
  Use E_URI_UUID_Family  As Family ;
  Use T_URI_UUID_UUID    As UUID   ;
  Use T_Inet_Addr_Mac_V6 As Mac    ;
  
  Class C_URI_UUID_Factory Extends C_Object
  {
    Var $PreLoad=[
      0=>'/URI/UUID/Rfc4122/Reserved',
      1=>'/URI/UUID/Rfc4122/V1',
      2=>'/URI/UUID/Rfc4122/V2',
      3=>'/URI/UUID/Rfc4122/V3',
      4=>'/URI/UUID/Rfc4122/V4',
      5=>'/URI/UUID/Rfc4122/V5',
      6=>'/URI/UUID/Rfc4122/V6',
      7=>'/URI/UUID/Rfc4122/V7',
      8=>'/URI/UUID/Rfc4122/V8',
      9=>'/URI/UUID/Rfc4122/Reserved',
      10=>'/URI/UUID/Rfc4122/Reserved',
      11=>'/URI/UUID/Rfc4122/Reserved',
      12=>'/URI/UUID/Rfc4122/Reserved',
      13=>'/URI/UUID/Rfc4122/Reserved',
      15=>'/URI/UUID/Rfc4122/Reserved',
      
      'Oittaa'    =>'/URI/UUID/Rfc4122/Oittaa'   , //V8
      'Nil'       =>'/URI/UUID/Family/Nil'       ,
      'Max'       =>'/URI/UUID/Family/Max'       ,
      'Rfc4122'   =>'/URI/UUID/Family/Rfc4122'   ,
      'Microsoft' =>'/URI/UUID/Family/Microsoft' ,
      'NCS'       =>'/URI/UUID/Family/NCS'       ,
      'Reserved'  =>'/URI/UUID/Family/Reserved'  ,
      'Unknown'   =>'/URI/UUID/Family/Unknown'   ,
    ];
    
    Var $Structs=[];
    
    Function AddCustomStruct($Type, $Class) { Return $this->Structs[$Type]=$Class; }
    
    Function GetStruct($Type)
    {
      If($Res=$this->Structs[$Type]?? Null) Return $Res;
      If(Array_Key_Exists($Type, $this->Structs)) Return Null;
      $Res=$this->_GetStruct($Type);
      
      If(!$Res)
        $this->Log('Error', 'Unknown UUID class ', $Type);
      
      Return $this->Structs[$Type]=$Res;
    }
  
    Function _GetStruct($Type)
    {
      If($Res=$this->PreLoad[$Type]?? Null)
        Return $this->Object_GetLoader()->Load_Type($Res);
        
      If(Class_Exists($Type, False))
        Return $Type;
      
      Return Null;
    }
  
    Function FromBinary(String $Binary, String $Class=Null): UUID
    {
      $Class??=Family::GetClass($Binary);
      $Class=$this->GetStruct($Class);
      Return New $Class($Binary);
    }
    
    Function FromDec($v, $Class=Null)
    {
      If($R=Static::_FromOid($v))
        Return $this->FromBinary($R, $Class);
      Throw New \TypeError('Dec is wrong: '.$v);
    }
    
    Function FromOid($v, $Class=Null)
    {
      If($R=Static::_FromOid($v))
        Return $this->FromBinary($R, $Class);
      Throw New \TypeError('OID is wrong: '.$v);
    }
    
    Static Function _FromDec($v)
    {
      If(!Preg_Match('/^[0-9]+$/Ss',$v)) Return '';
      $Hex=Str_Pad(Gmp_StrVal(Gmp_Init($v, 10), 16), 32, '0', STR_PAD_LEFT);
      Return Hex2Bin($Hex);
    }

    Static Function _FromOid($v)
    {
      $Prefix='2.25.';
      If(!Str_Starts_With($v, $Prefix)) Return '';
      $Num=SubStr($v, StrLen($Prefix));
      Return Static::_FromDec($v);
    }

    Var $Parse_Regexp='/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/Ssi';
     
    Function _Parse(String $v): String
    {
      $S='urn:'  ; If(Str_Starts_With($v, $S)) $v=SubStr($v, StrLen($S));
      $S='uuid:' ; If(Str_Starts_With($v, $S)) $v=SubStr($v, StrLen($S));
      If(!StrLen($v)) Return '';
      If($v[0]==='{')
      {
        If($v[StrLen($v)-1]!=='}') Return '';
        $v=SubStr($v, 1, -1);
      }
      
      If(!Preg_Match($this->Parse_Regexp, $v)) Return '';
      $v=Str_Replace('-', '', $v);
      
      If(StrLen($v)!=32) Return '';

      Return Hex2Bin($v);
    }
    
    Function SafeParse(String $v, $Class=Null): ?UUID
    {
      $Res=$this->_Parse($v);
      If($Res==='') Return Null;
      Return $this->FromBinary($Res, $Class);
    }
    
    Function Parse(String $v, $Class=Null): UUID
    {
      $Res=$this->SafeParse($v, $Class);
      If(!$Res) Throw New \TypeError('UUID is wrong: '.$v);
      Return $Res;
    }
    
    Function Verify(String $v): Bool { Return $this->_Parse($v)!==''; }
    
    Function Create($Class, ...$Args):UUID { Return $this->GetStruct($Class)::_Create($this, ...$Args); }

    Function Ncs($Node=Null, $Family=Null, $Hns=Null, $Rsrv=0 ) { Return $this->Create('NCS', $Node, $Family, $Hns, $Rsrv); }
    Function V1(               $Hns=Null, $Seq=Null, $Mac=Null) { Return $this->Create(1,           $Hns, $Seq, $Mac  ); }
    Function V2($Dn, $Id=Null, $Hns=Null, $Seq=Null, $Mac=Null) { Return $this->Create(2, $Dn, $Id, $Hns, $Seq, $Mac  ); }
    Function V3($NameSpace,    $Name                          ) { Return $this->Create(3, $NameSpace,  $Name          ); }
    Function V4(               $Random=Null                   ) { Return $this->Create(4,           $Random           ); }
    Function V5($NameSpace,    $Name                          ) { Return $this->Create(5, $NameSpace,  $Name          ); }
    Function V6(               $Hns=Null, $Seq=Null, $Mac=Null) { Return $this->Create(6,           $Hns, $Seq, $Mac  ); }
    Function V7(               $Hns=Null, $Seq=Null, $Rnd=Null) { Return $this->Create(7,           $Hns, $Seq, $Rnd  ); }
    Function V8(               $Custom=Null                   ) { Return $this->Create(8,           $Custom           ); }
    Function Oittaa(           $Hns=Null,            $Rnd=Null) { Return $this->Create('Oittaa',    $Hns,       $Rnd  ); } //V8
    
    Var $Vars=[];
    
    Function  _GetVar($Name    ) { Return $this->Vars[$Name]?? Null; }
    Function  _SetVar($Name, $v) {        $this->Vars[$Name]=  $v  ; }
    
    Var $OverridedTime=Null;
    
    Function OverrideTime($Time=Null)
    {
      //TODO: Parse time if it is string;
      $this->OverridedTime=$Time;
      $this->Seq_Old=[];
    }
    
    Function TimeStamp100ns(): Int
    {
      If(!Is_Null($Res=$this->OverridedTime)) Return $Res;
      [$USec, $Sec]=Explode(' ', (String)MicroTime(False), 2);
      $Res =(Int)              $Sec*10_000_000; // 100ns tick
      $Res+=(Int)Floor((Float)$USec*10_000_000);
      Return $Res;
    }
    
    Static Function _RestoreTime(
      $Time   ,
      $Div    = 1,
      $Bits   =48,
      $Shift  = 0,
      $Offset = 0,
    )
    {
      // Extract
      $Sub   =$Time & ((1<<$Shift)-1);
      $Res   =$Time>>$Shift;
      // Modify
      $Sub   =(($Sub+1)*$Div)>>$Shift;
      $Res   =$Res*$Div+$Sub;
      
      Return $Res+$Offset;
    }
    
    Function _Time(
      $Time   ,
      $Div    =1,
      $Bits   =48,
      $Shift  =0,
      $Offset =0,
    )
    {
      $Time??=$this->TimeStamp100ns();
      $Res=$Time-$Offset;
      // Extract
      $Sub=       $Res%$Div ;
      $Res=IntDiv($Res,$Div);
      // Check
      If($Res<0        ) Throw New \TypeError('TimeStamp is too small '.$Time);
      If($Res>=1<<$Bits) Throw New \TypeError('TimeStamp is too big '  .$Time);
      // Modify
      $Sub=IntDiv($Sub<<$Shift, $Div);
      $Res=      ($Res<<$Shift)|$Sub;
      Return $Res;
    }
    
    Var $Seq_Def='Random'; //'Zero'
    Var $Seq_Rnd='';
    Var $Seq_Old=[];
    
    Function _Seq(
      Int   &$Time   ,
             $Seq    ,
      Int    $Bits   ,
      String $Id     ,
    )
    {
      $Mask=(1<<$Bits)-1;
      
      If(Is_Int($Seq))
      {
        If($Seq<0    ) Throw New \TypeError('Sequence is too small '.$Seq);
        If($Seq>$Mask) Throw New \TypeError('Sequence is too big '  .$Seq);
        Return $Seq;
      }
      $Seq??=$this->Seq_Def;
      If(!Is_String($Seq)) Throw New \TypeError('Sequence has unknown type '.GetType($Seq));
      
      [$OldTime, $OldSeq]=$this->Seq_Old[$Id]?? [-1,-1];
      If($OldSeq>=0 && $OldTime>$Time)
        $OldSeq=$this->Log('Warning', 'Microtime is decreased: ', $OldTime, '=>',$Time)->Ret(-1);
        
      If($OldSeq>=0 && ($Diff=($Time-$OldTime)<<$Bits)<=$OldSeq)
        $Res=$OldSeq-$Diff+1;
      Else
        Switch($Seq)
        {
        Case 'Inc'    : $Res=($OldSeq+1)&$Mask; Break;
        Case 'Zero'   : $Res=0; Break;
        Case 'Random' :
          $Res=$this->Random($this->Seq_Rnd, ($Bits+7)>>3);
          $Res=HexDec(Bin2Hex($Res)) &$Mask;
          Break;
        Default: Throw New \TypeError('Sequence is unknown '.$Seq);
        }
      $this->Seq_Old[$Id]=[$Time, $Res];
      
      $Time+=$Res>>$Bits; //Fix Time
      Return $Res &$Mask;
    }
    
    Function Random(&$Rnd, Int $Len)
    {
      $Rnd??='';
      If(StrLen($Rnd)>$Len)
      {
        $Res=SubStr($Rnd, 0, $Len);
        $Rnd=SubStr($Rnd,    $Len);
      }
      Else
      {
        $Res=$Rnd;
        $Rnd='';
      }
      If($L=$Len-StrLen($Res))
        $Res.=Random_Bytes($L);        
      Return $Res;
    }
    
    Function _Mac(Mac|String|Null $Mac=Null)
    {
      $f=$this->Get_Singleton('/Inet/Addr/Mac/Factory');
      $Res=$Mac? $f->Parse($Mac):$f->Current();
      $Res=$Res->ToBinary();
      If(StrLen($Res)!==6) Throw New \TypeError('Mac is wrong: '.$Mac);
      Return $Res;
    }
    
    Function _NS(UUID|String $NameSpace) { Return $this->GetNameSpaces()->Get($NameSpace)->ToBinary(); }
    Function _HS(UUID|String $HashSpace) { Return $this->GetHashSpaces()->GetHasher($HashSpace); }
    
    Protected $NameSpaces;
    Protected $HashSpaces;

    Function GetNameSpaces() { Return $this->NameSpaces??=$this->Create_Object('/URI/UUID/NameSpace', ['Factory'=>$this]); }
    Function GetHashSpaces() { Return $this->HashSpaces??=$this->Create_Object('/URI/UUID/HashSpace', ['Factory'=>$this]); }
  }
?>